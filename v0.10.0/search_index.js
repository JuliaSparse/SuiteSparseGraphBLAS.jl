var documenterSearchIndex = {"docs":
[{"location":"binaryops/#Binary-Operators","page":"Binary Operators","title":"Binary Operators","text":"","category":"section"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"Binary operators are defined on three domains D_1 times D_2 rightarrow D_3. However, the vast majority of binary operators are defined on a single domain.","category":"page"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"BinaryOps are in almost every GraphBLAS operation. They are the primary op argument for emul, eadd, and apply. BinaryOps which are also monoids may be used in reduce. And every GraphBLAS operation which takes an accum keyword argument accepts a BinaryOp.","category":"page"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"In almost all cases you should pass Julia functions, which will be mapped to built-in operators, or used to create a new user-defined operator.","category":"page"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"using SuiteSparseGraphBLAS\n\nx = GBMatrix([[1,2] [3,4]])\n\nx .+ x\neadd(x, x, +)\n\nx .^ x\nemul(x, x, ^)\n\nx2 = Float64.(x)\neadd!(x2, x, x, +; accum=/)","category":"page"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"Internally functions are lowered like this:","category":"page"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"using SuiteSparseGraphBLAS\n\ntypedop = binaryop(+, Int64, Int64)\n\neadd(GBVector([1,2]), GBVector([3,4]), typedop)","category":"page"},{"location":"binaryops/#Built-Ins","page":"Binary Operators","title":"Built-Ins","text":"","category":"section"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"All built-in binary operators can be found below:","category":"page"},{"location":"binaryops/","page":"Binary Operators","title":"Binary Operators","text":"Julia Function GraphBLAS Name Notes\nfirst FIRST first(x, y) = x\nsecond SECOND second(x, y) = y\nany ANY any(x, y) = 1 if x or y are stored values\npair PAIR any(x, y) = 1 if x and y are stored values\n+ PLUS \n- MINUS \nrminus RMINUS \n* TIMES \n/ DIV \n\\ RDIV \n^ POW \niseq ISEQ iseq(x::T, y::T) = T(x == y)\nisne ISNE isne(x::T, y::T) = T(x != y)\nmin MIN \nmax MAX \nisgt ISGT isgt(x::T, y::T) = T(x > y)\nislt ISLT islt(x::T, y::T) = T(x < y)\nisge ISGE isge(x::T, y::T) = T(x >= y)\nisle ISLE isle(x::T, y::T) = T(x <= y)\n∨ LOR \n∧ LAND \nlxor LXOR \n== EQ \n!= NE \n> GT \n< LT \n>= GE \n<= LE \nxnor LXNOR \natan ATAN2 \nhypot HYPOT \nfmod FMOD \nrem REMAINDER \nldexp LDEXP \ncopysign COPYSIGN \ncomplex CMPLX \n| BOR \n& BAND \n⊻ BXOR \nbget BGET \nbset BSET \nbclr BCLR \n>> BSHIFT \nfirsti0 FIRSTI firsti0(A[i,j], B[k,l]) = i - 1\nfirsti FIRSTI1 firsti(A[i,j], B[k,l]) = i\nfirstj0 FIRSTJ firstj0(A[i,j], B[k,l]) = j - 1\nfirstj FIRSTJ1 firstj(A[i,j], B[k,l]) = j\nsecondi0 SECONDI secondi0(A[i,j], B[k,l]) = k - 1\nsecondi SECONDI1 secondi(A[i,j], B[k,l]) = k\nsecondj0 SECONDJ secondj0(A[i,j], B[k,l]) = l - 1\nsecondj SECONDJ1 secondj(A[i,j], B[k,l]) = l","category":"page"},{"location":"semirings/#Semirings","page":"Semirings","title":"Semirings","text":"","category":"section"},{"location":"semirings/","page":"Semirings","title":"Semirings","text":"A semiring in GraphBLAS is a set of three domains D_1, D_2, and D_3, along with two binary operators and an identity element mathbb0. ","category":"page"},{"location":"semirings/","page":"Semirings","title":"Semirings","text":"The first operator, oplus or \"add\" is a commutative and associative monoid defined on D_3 times D_3 rightarrow D_3. The identity of the monoid is mathbb0. See Monoids for more information.","category":"page"},{"location":"semirings/","page":"Semirings","title":"Semirings","text":"The second, otimes or \"multiply\", is a binary operator defined on D_1 times D_2 rightarrow D_3. See Binary Operators for more information. ","category":"page"},{"location":"semirings/","page":"Semirings","title":"Semirings","text":"A semiring is denoted by a tuple (D_1 D_2 D_3 oplus otimes mathbb0). However in the vast majority of cases D_1 = D_2 = D_3 so this is often shortened to (oplus otimes).","category":"page"},{"location":"semirings/","page":"Semirings","title":"Semirings","text":"Semirings are used in two GraphBLAS operations, mul! and *.","category":"page"},{"location":"semirings/#Passing-to-Functions","page":"Semirings","title":"Passing to Functions","text":"","category":"section"},{"location":"semirings/","page":"Semirings","title":"Semirings","text":"mul! and * are the only functions which accept semirings, and the best method to do so is a tuple of binary functions like *(A, B, (max, +)). An operator form is also available as *(min, +)(A, B).","category":"page"},{"location":"utilities/","page":"Utilities","title":"Utilities","text":"setfill\nsetfill!\nsparsitystatus\nformat\nsetstorageorder!\ngbset\nDescriptor\nSuiteSparseGraphBLAS.set_lib!\nempty!\nSuiteSparseGraphBLAS.Complement\nSuiteSparseGraphBLAS.Structural\nSuiteSparseGraphBLAS.xtype\nSuiteSparseGraphBLAS.ytype\nSuiteSparseGraphBLAS.ztype\ngbrand","category":"page"},{"location":"utilities/#SuiteSparseGraphBLAS.setfill","page":"Utilities","title":"SuiteSparseGraphBLAS.setfill","text":"setfill(A::AbstractGBArray{T, F, N}, x::F2)\n\nCreate a new AbstractGBArray with the same underlying data but a new fill x. The fill type of A and the type of x may be different.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.setfill!","page":"Utilities","title":"SuiteSparseGraphBLAS.setfill!","text":"setfill!(A::AbstractGBArray{T, F, N}, x::F)\n\nModify the fill value of A.  The fill type of A and the type of x must be the same.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.sparsitystatus","page":"Utilities","title":"SuiteSparseGraphBLAS.sparsitystatus","text":"sparsitystatus(A::AbstractGBArray)::AbstractSparsity\n\nReturn the current sparsity of A, which is one of Dense, Bitmap, Sparse, or Hypersparse.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.format","page":"Utilities","title":"SuiteSparseGraphBLAS.format","text":"format(A::AbstractGBArray) -> (s::AbstractSparsity, o::StorageOrders.StorageOrder)\n\nReturn the sparsity status and storage order of A as a tuple.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.setstorageorder!","page":"Utilities","title":"SuiteSparseGraphBLAS.setstorageorder!","text":"setstorageorder!(A::AbstractGBArray, o::StorageOrders.StorageOrder)\n\nSet the storage order of A, either StorageOrders.RowMajor() or StorageOrders.ColMajor().\n\nUsers must call wait(A) before this will be reflected in A,  however operations will perform this wait automatically on input.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.gbset","page":"Utilities","title":"SuiteSparseGraphBLAS.gbset","text":"gbset(A::GBArray, option, value)\ngbset(option, value)\n\nSet an option either for a specific GBArray, or globally. The commonly used options are:     - :format = [RowMajor() | ColMajor()]: The global default or array specific     column major or row major ordering.     - :nthreads = [Integer]: The global number of OpenMP threads to use.     - :burble = [Bool]: Print diagnostic output.     - :sparsity_control = [:full | :bitmap | :sparse | :hypersparse]: Set the sparsity of a     single GBArray.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.Descriptor","page":"Utilities","title":"SuiteSparseGraphBLAS.Descriptor","text":"Descriptor\n\nContext object which may be optionally passed to many SuiteSparse:GraphBLAS functions.\n\nSee the SuiteSparse:GraphBLAS User Guide or the SuiteSparseGraphBLAS.jl docs for more information.\n\nOptions\n\nnthreads::Int = Sys.CPU_THREADS ÷ 2: Specify the maximum number of threads to be used by\n\na function, defaults to avoid hyperthreading, which is typically most performant.\n\nreplace_output: Clear the output array before assignment.\nstructural_mask::Bool: Utilize the structure of the mask argument, rather than its values.\ncomplement_mask::Bool: Values which are true in the complement of the mask will be kept.\n\n\n\n\n\n","category":"type"},{"location":"utilities/#SuiteSparseGraphBLAS.set_lib!","page":"Utilities","title":"SuiteSparseGraphBLAS.set_lib!","text":"set_lib!(path; export_prefs::Bool = false)\n\nSet the shared library path for SuiteSparse:GraphBLAS. Set to \"default\" to use the provided artifact.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#Base.empty!","page":"Utilities","title":"Base.empty!","text":"empty!(A::AbstractGBArray)\n\nClear all the entries from the GBArray. Does not modify the type or dimensions.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.Complement","page":"Utilities","title":"SuiteSparseGraphBLAS.Complement","text":"Complement{T}\n\nThe complement of a GraphBLAS mask.  This wrapper will set the mask argument of a GraphBLAS operation to be the negation of the original mask.\n\nIt may be nested an arbitrary number of times.\n\n\n\n\n\n","category":"type"},{"location":"utilities/#SuiteSparseGraphBLAS.Structural","page":"Utilities","title":"SuiteSparseGraphBLAS.Structural","text":"Structural{T}\n\nThis wrapper will set a GraphBLAS mask to use the presence of values in the mask rather than their values to determine the mask.\n\n\n\n\n\n","category":"type"},{"location":"utilities/#SuiteSparseGraphBLAS.xtype","page":"Utilities","title":"SuiteSparseGraphBLAS.xtype","text":"xtype(op::GrBOp)::DataType\n\nDetermine type of the first argument to a typed operator.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.ytype","page":"Utilities","title":"SuiteSparseGraphBLAS.ytype","text":"ytype(op::GrBOp)::DataType\n\nDetermine type of the second argument to a typed operator.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.ztype","page":"Utilities","title":"SuiteSparseGraphBLAS.ztype","text":"ztype(op::GrBOp)::DataType\n\nDetermine type of the output of a typed operator.\n\n\n\n\n\n","category":"function"},{"location":"utilities/#SuiteSparseGraphBLAS.gbrand","page":"Utilities","title":"SuiteSparseGraphBLAS.gbrand","text":"gbrand(typeorrange, nrows, ncols, density; kwargs...)::GBMatrix\ngbrand(rng::AbstractRNG, typeorrange, nrows, ncols, density; kwargs...)::GBMatrix\n\nConstruct a random GBMatrix, analogous to sprand from SparseArrays\n\nArguments\n\nrng::AbstractRNG: Random number generator for both values and indices.\ntypeorrange: Either a type such as Float64, or a range such as 1:10.\n\nAny input which supports eltype(typeorrange).\n\nnrows::Integer, ncols::Integer: Dimensions of the result.\ndensity::AbstractFloat: The approximate density of result.\n\nKeywords\n\nsymmetric::Bool: The result matrix is symmetric, Aᵀ = A.\npattern::Bool: The result matrix consists solely of one(eltype(typeorrange)).\nskewsymmetric::Bool: The result matrix is skew-symmetric, Aᵀ = -A.\nhermitian::Bool: The result matrix is hermitian, aᵢⱼ = āⱼᵢ.\nnodiagonal::Bool: The result matrix has no values on the diagonal.\n\nReturns\n\nGBMatrix\n\n\n\n\n\n","category":"function"},{"location":"performance/#Performance-Tips","page":"Performance Tips","title":"Performance Tips","text":"","category":"section"},{"location":"udfs/#User-Defined-Operators","page":"User Defined Operators","title":"User Defined Operators","text":"","category":"section"},{"location":"udfs/","page":"User Defined Operators","title":"User Defined Operators","text":"warning: Experimental\nThis is still a work in progress, and subject to change. Please open an issue if you find any problems!","category":"page"},{"location":"udfs/","page":"User Defined Operators","title":"User Defined Operators","text":"GraphBLAS supports users to supply functions as operators. Constructors exported are:","category":"page"},{"location":"udfs/","page":"User Defined Operators","title":"User Defined Operators","text":"UnaryOp(name::String, fn::Function, [type | types | ztype, xtype | ztypes, xtypes])\nBinaryOp(name::String, fn::Function, [type | types | ztype, xtype | ztypes, xtypes])\nMonoid(name::String, binop::Union{GrB_BinaryOp}, id::T, terminal::T = nothing): all types must be the same.\nSemiring(name::String, add::[GrB_Monoid | AbstractMonoid], mul::GrB_BinaryOp)","category":"page"},{"location":"udfs/","page":"User Defined Operators","title":"User Defined Operators","text":"GrB_ prefixed arguments are typed operators, such as the result of UnaryOps.COS[Float64]. Type arguments may be single types or vectors of types. If no type is supplied to UnaryOp or BinaryOp they will default to constructing typed operators for all the built-in primitive types.","category":"page"},{"location":"udfs/","page":"User Defined Operators","title":"User Defined Operators","text":"The fn arguments to UnaryOp and BinaryOp must have one or two arguments respectively.","category":"page"},{"location":"udfs/","page":"User Defined Operators","title":"User Defined Operators","text":"danger: Performance\nDue to the nature of the underlying C library user-defined operators may be significantly slower than their built-in counterparts. When possible use the built-in operators, or combinations of them.","category":"page"},{"location":"udfs/","page":"User Defined Operators","title":"User Defined Operators","text":"note: Where to Find User-Defined Operators\nThe constructors for an operator add that operator to the submodule for that operator type. For instance UnaryOp(minus, -, Int64, Int64) will add UnaryOps.minus.","category":"page"},{"location":"api/","page":"-","title":"-","text":"danger: Public vs Private API\nAll private docstrings are collected on this page. However, only assume exported functions and types are part of the public API. ","category":"page"},{"location":"api/","page":"-","title":"-","text":"SuiteSparseGraphBLAS.gbtype\nSuiteSparseGraphBLAS.juliatype\nSuiteSparseGraphBLAS.GxBIterator\nSuiteSparseGraphBLAS.suffix\nSuiteSparseGraphBLAS.idx\nSuiteSparseGraphBLAS.GBSparsity","category":"page"},{"location":"api/#SuiteSparseGraphBLAS.gbtype","page":"-","title":"SuiteSparseGraphBLAS.gbtype","text":"gbtype(x)\n\nDetermine the GBType equivalent of a Julia primitive type.\n\nSee also: juliatype\n\n\n\n\n\n","category":"function"},{"location":"api/#SuiteSparseGraphBLAS.juliatype","page":"-","title":"SuiteSparseGraphBLAS.juliatype","text":"tojuliatype(x::GBType)\n\nDetermine the Julia equivalent of a GBType.\n\nSee also: gbtype\n\n\n\n\n\n","category":"function"},{"location":"api/#SuiteSparseGraphBLAS.GxBIterator","page":"-","title":"SuiteSparseGraphBLAS.GxBIterator","text":"GxBIterator{Order, Eltype, AbstractGBArray}\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.suffix","page":"-","title":"SuiteSparseGraphBLAS.suffix","text":"Return the GxB type suffix of a Julia datatype as a String.\n\n\n\n\n\n","category":"function"},{"location":"api/#SuiteSparseGraphBLAS.idx","page":"-","title":"SuiteSparseGraphBLAS.idx","text":"idx(I)\n\nHandle different indexing types (ALL, scalar, range-based, and vector). Returns the proper format for GraphBLAS indexing. Should not be used for functions that take a single scalar index like [extractElement].\n\n\n\n\n\n","category":"function"},{"location":"api/#SuiteSparseGraphBLAS.GBSparsity","page":"-","title":"SuiteSparseGraphBLAS.GBSparsity","text":"Sparsity options for GraphBLAS. values can be summed to produce additional options.\n\n\n\n\n\n","category":"type"},{"location":"api/","page":"-","title":"-","text":"Modules = [LibGraphBLAS]\nPublic = false","category":"page"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_opaque","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_opaque","text":"GB_Iterator_opaque\n\nThe contents of an iterator must not be directly accessed by the user application.  Only the functions and macros provided here may access \"iterator->...\" contents.  The iterator is defined here only so that macros can be used to speed up the use of the iterator methods.  User applications must not use \"iterator->...\" directly.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp","text":"The pointers are void * but they are always of pointers to objects of type ztype, xtype, and ytype, respectively.  See Demo/usercomplex.c for examples.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Format","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Format","text":"GrB_Format\n\nThe GrB C API specification supports 3 formats:\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Index","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Index","text":"GrB_Index: row or column index, or matrix dimension.  This typedef is used for row and column indices, or matrix and vector dimensions.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp","text":"The indexop has the form z = f(aij, i, j, y) where aij is the numerical value of the A(i,j) entry, i and j are its row and column index, and y is a scalar.  For vectors, it has the form z = f(vi, i, 0, y).\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Info","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Info","text":"GrB_Info\n\nThe v1.3 C API did not specify the enum values, but they appear in v2.0. Changing them will require SuiteSparse:GraphBLAS to bump to v6.x. Error codes GrBNOTIMPLEMENTED and GrBEMPTYOBJECT are new to v2.0.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix","text":"============================================================================== GrB_Matrix: a GraphBLAS matrix ==============================================================================\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Mode","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Mode","text":"GrB_Mode\n\nThe extension GxBinit does the work of GrBinit, but it also defines the memory management functions that SuiteSparse:GraphBLAS will use internally.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid","text":"A monoid is an associative operator z=op(x,y) where all three types of z, x, and y are identical.  The monoid also has an identity element, such that op(x,identity) = op(identity,x) = x.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring","text":"============================================================================== GrB_Semiring ==============================================================================\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type","text":"============================================================================== GrB_Type: data types ==============================================================================\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp","text":"The pointers are void * but they are always of pointers to objects of type ztype and xtype, respectively.  The function must typecast its arguments as needed from void* to ztype* and xtype*.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector","text":"============================================================================== GrB_Vector: a GraphBLAS vector ==============================================================================\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_WaitMode","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_WaitMode","text":"GrB_WaitMode\n\n============================================================================== GrB_wait: finish computations ==============================================================================\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Format_Value","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Format_Value","text":"GxB_Format_Value\n\nGxB_FORMAT can be by row or by column:\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Print_Level","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Print_Level","text":"GxB_Print_Level\n\nGxBfprint (object, GxBPrint_Level pr, FILE *f) prints the contents of any of the 9 GraphBLAS objects to the file f, and also does an extensive test on the object to determine if it is valid.  It returns one of the following error conditions:\n\n GrB_SUCCESS               object is valid\n GrB_UNINITIALIZED_OBJECT  object is not initialized\n GrB_INVALID_OBJECT        object is not valid\n GrB_NULL_POINTER          object is a NULL pointer\n GrB_INVALID_VALUE         fprintf returned an I/O error; see the ANSI C\n                           errno or GrB_error( )for details.\n\nGxBfprint does not modify the status of any object.  If a matrix or vector has not been completed, the pending computations are guaranteed to not be performed by GxBfprint.  The reason is simple.  It is possible for a bug in the user application (such as accessing memory outside the bounds of an array) to mangle the internal content of a GraphBLAS object, and GxBfprint can be a helpful tool to track down this bug.  If GxBfprint attempted to complete any computations prior to printing or checking the contents of the matrix or vector, then further errors could occur, including a segfault.\n\nThe type-specific functions include an additional argument, the name string. The name is printed at the beginning of the display (assuming pr is not GxBSILENT) so that the object can be more easily identified in the output. For the type-generic methods GxBfprint and GxB_print, the name string is the variable name of the object itself.\n\nIf f is NULL, stdout is used; this is not an error condition.  If pr is outside the bounds 0 to 3, negative values are treated as GxBSILENT, and values > 3 are treated as GxBCOMPLETE.  If name is NULL, it is treated as the empty string.\n\nGxBprint (object, GxBPrintLevel pr) is the same as GxBfprint, except that it prints the contents with printf instead of fprintf to a file f.\n\nThe exact content and format of what is printed is implementation-dependent, and will change from version to version of SuiteSparse:GraphBLAS.  Do not attempt to rely on the exact content or format by trying to parse the resulting output via another program.  The intent of these functions is to produce a report of the object for visual inspection.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar","text":"GxBScalar has become GrBScalar. The older name GxBScalar is kept as historical, but GrBScalar should be used instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp","text":"The values of i and j are guaranteed to be in the range 0 to GrBINDEXMAX, and they can be safely typecasted to int64_t then negated, if desired, without any risk of integer overflow.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_binary_function","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_binary_function","text":"\n\nmethods for binary operators\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_select_function","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_select_function","text":"User-defined GxBSelectOps are historical.  New code should use GrBIndexUnaryOp_new instead.\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_unary_function","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_unary_function","text":"\n\nmethods for unary operators\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.RMM_MODE","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.RMM_MODE","text":"RMM_MODE\n\nTODO describe the modes\n\n\n\n\n\n","category":"type"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_BinaryOp_new-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_BinaryOp_new","text":"GB_BinaryOp_new(binaryop, _function, ztype, xtype, ytype, binop_name)\n\nGBBinaryOpnew is historical: use GxBBinaryOpnew instead\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_BinaryOp_new ( GrB_BinaryOp *binaryop, GxB_binary_function function, GrB_Type ztype, GrB_Type xtype, GrB_Type ytype, const char *binop_name );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_attach-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_attach","text":"GB_Iterator_attach(iterator, A, format, desc)\n\n\n\nGBIteratorattach: attach a row/col/entry iterator to a matrix\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_Iterator_attach ( GxB_Iterator iterator, GrB_Matrix A, GxB_Format_Value format, GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_rc_bitmap_next-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_rc_bitmap_next","text":"GB_Iterator_rc_bitmap_next(iterator)\n\n\n\nGBIteratorrcbitmapnext: move a row/col iterator to next entry in bitmap\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_Iterator_rc_bitmap_next (GxB_Iterator iterator);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_rc_seek-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_Iterator_rc_seek","text":"GB_Iterator_rc_seek(iterator, j, jth_vector)\n\n\n\nGBIteratorrc_seek: seek a row/col iterator to a particular vector\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_Iterator_rc_seek ( GxB_Iterator iterator, GrB_Index j, bool jth_vector );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_SelectOp_new-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_SelectOp_new","text":"GB_SelectOp_new(selectop, _function, xtype, ttype, name)\n\nGBSelectOpnew should not be called directly, but only through the GxBSelectOpnew macro (but use GrBIndexUnaryOpnew instead).\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_SelectOp_new ( GxB_SelectOp *selectop, GxB_select_function function, GrB_Type xtype, GrB_Type ttype, const char *name );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_Type_new-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_Type_new","text":"GB_Type_new(type, sizeof_ctype, type_name)\n\nGBTypenew is historical: use GxBTypenew instead\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_Type_new ( GrB_Type *type, size_t sizeof_ctype, const char *type_name );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_UnaryOp_new-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_UnaryOp_new","text":"GB_UnaryOp_new(unaryop, _function, ztype, xtype, unop_name)\n\nGBUnaryOpnew is historical: use GxBUnaryOpnew instead\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_UnaryOp_new ( GrB_UnaryOp *unaryop, GxB_unary_function function, GrB_Type ztype, GrB_Type xtype, const char *unop_name );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GB_Vector_Iterator_bitmap_seek-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GB_Vector_Iterator_bitmap_seek","text":"GB_Vector_Iterator_bitmap_seek(iterator, unused)\n\nReturns GrBSUCCESS if the iterator is at an entry that exists in the vector, or GxBEXHAUSTED if the iterator is exhausted.\n\nPrototype\n\nGB_PUBLIC GrB_Info GB_Vector_Iterator_bitmap_seek (GxB_Iterator iterator, GrB_Index unused);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp_error","text":"GrB_BinaryOp_error(error, op)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_BinaryOp_error (const char **error, const GrB_BinaryOp op);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp_free","text":"GrB_BinaryOp_free(binaryop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_BinaryOp_free ( GrB_BinaryOp *binaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_BinaryOp_wait","text":"GrB_BinaryOp_wait(op, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_BinaryOp_wait (GrB_BinaryOp op , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Col_assign-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Col_assign","text":"GrB_Col_assign(C, mask, accum, u, I, ni, j, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Col_assign ( GrB_Matrix C, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Vector u, const GrB_Index *I, GrB_Index ni, GrB_Index j, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Col_extract-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Col_extract","text":"GrB_Col_extract(w, mask, accum, A, I, ni, j, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Col_extract ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Matrix A, const GrB_Index *I, GrB_Index ni, GrB_Index j, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_error","text":"GrB_Descriptor_error(error, d)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Descriptor_error (const char **error, const GrB_Descriptor d);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_free","text":"GrB_Descriptor_free(descriptor)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Descriptor_free ( GrB_Descriptor *descriptor );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_new-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_new","text":"GrB_Descriptor_new(descriptor)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Descriptor_new ( GrB_Descriptor *descriptor );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_set-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_set","text":"GrB_Descriptor_set(desc, field, val)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Descriptor_set ( GrB_Descriptor desc, GrB_Desc_Field field, GrB_Desc_Value val );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Descriptor_wait","text":"GrB_Descriptor_wait(desc, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Descriptor_wait (GrB_Descriptor desc , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp_error","text":"GrB_IndexUnaryOp_error(error, op)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_IndexUnaryOp_error (const char **error, const GrB_IndexUnaryOp op);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp_free","text":"GrB_IndexUnaryOp_free(op)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_IndexUnaryOp_free ( GrB_IndexUnaryOp *op );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_IndexUnaryOp_wait","text":"GrB_IndexUnaryOp_wait(op, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_IndexUnaryOp_wait (GrB_IndexUnaryOp op , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply","text":"GrB_Matrix_apply(C, Mask, accum, op, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_UnaryOp op, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_BOOL","text":"GrB_Matrix_apply_BinaryOp1st_BOOL(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_BOOL ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, bool x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_FP32","text":"GrB_Matrix_apply_BinaryOp1st_FP32(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_FP32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, float x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_FP64","text":"GrB_Matrix_apply_BinaryOp1st_FP64(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_FP64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, double x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT16","text":"GrB_Matrix_apply_BinaryOp1st_INT16(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_INT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int16_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT32","text":"GrB_Matrix_apply_BinaryOp1st_INT32(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_INT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int32_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT64","text":"GrB_Matrix_apply_BinaryOp1st_INT64(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_INT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int64_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_INT8","text":"GrB_Matrix_apply_BinaryOp1st_INT8(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_INT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int8_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_Scalar","text":"GrB_Matrix_apply_BinaryOp1st_Scalar(C, Mask, accum, op, x, A, desc)\n\nApply a binary operator to the entries in a matrix, binding the first input to a scalar x, C<Mask> = accum (C, op (x,A)), or op(x,A').\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_Scalar ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Scalar x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UDT","text":"GrB_Matrix_apply_BinaryOp1st_UDT(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_UDT ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const void *x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT16","text":"GrB_Matrix_apply_BinaryOp1st_UINT16(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_UINT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint16_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT32","text":"GrB_Matrix_apply_BinaryOp1st_UINT32(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_UINT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint32_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT64","text":"GrB_Matrix_apply_BinaryOp1st_UINT64(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_UINT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint64_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp1st_UINT8","text":"GrB_Matrix_apply_BinaryOp1st_UINT8(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp1st_UINT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint8_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_BOOL","text":"GrB_Matrix_apply_BinaryOp2nd_BOOL(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_BOOL ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, bool y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_FP32","text":"GrB_Matrix_apply_BinaryOp2nd_FP32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_FP32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, float y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_FP64","text":"GrB_Matrix_apply_BinaryOp2nd_FP64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_FP64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, double y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT16","text":"GrB_Matrix_apply_BinaryOp2nd_INT16(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_INT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, int16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT32","text":"GrB_Matrix_apply_BinaryOp2nd_INT32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_INT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, int32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT64","text":"GrB_Matrix_apply_BinaryOp2nd_INT64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_INT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, int64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_INT8","text":"GrB_Matrix_apply_BinaryOp2nd_INT8(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_INT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, int8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_Scalar","text":"GrB_Matrix_apply_BinaryOp2nd_Scalar(C, Mask, accum, op, A, y, desc)\n\nApply a binary operator to the entries in a matrix, binding the second input to a scalar y, C<Mask> = accum (C, op (A,y)), or op(A',y).\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_Scalar ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UDT","text":"GrB_Matrix_apply_BinaryOp2nd_UDT(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_UDT ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, const void *y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT16","text":"GrB_Matrix_apply_BinaryOp2nd_UINT16(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_UINT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, uint16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT32","text":"GrB_Matrix_apply_BinaryOp2nd_UINT32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_UINT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, uint32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT64","text":"GrB_Matrix_apply_BinaryOp2nd_UINT64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_UINT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, uint64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_BinaryOp2nd_UINT8","text":"GrB_Matrix_apply_BinaryOp2nd_UINT8(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_BinaryOp2nd_UINT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, uint8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_BOOL","text":"GrB_Matrix_apply_IndexOp_BOOL(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_BOOL ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, bool y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_FP32","text":"GrB_Matrix_apply_IndexOp_FP32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_FP32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, float y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_FP64","text":"GrB_Matrix_apply_IndexOp_FP64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_FP64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, double y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT16","text":"GrB_Matrix_apply_IndexOp_INT16(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_INT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT32","text":"GrB_Matrix_apply_IndexOp_INT32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_INT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT64","text":"GrB_Matrix_apply_IndexOp_INT64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_INT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_INT8","text":"GrB_Matrix_apply_IndexOp_INT8(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_INT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_Scalar","text":"GrB_Matrix_apply_IndexOp_Scalar(C, Mask, accum, op, A, y, desc)\n\nApply a GrB_IndexUnaryOp to the entries in a matrix.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_Scalar ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UDT","text":"GrB_Matrix_apply_IndexOp_UDT(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_UDT ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, const void *y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT16","text":"GrB_Matrix_apply_IndexOp_UINT16(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_UINT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT32","text":"GrB_Matrix_apply_IndexOp_UINT32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_UINT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT64","text":"GrB_Matrix_apply_IndexOp_UINT64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_UINT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_apply_IndexOp_UINT8","text":"GrB_Matrix_apply_IndexOp_UINT8(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_apply_IndexOp_UINT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign","text":"GrB_Matrix_assign(C, Mask, accum, A, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Matrix A, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_BOOL-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_BOOL","text":"GrB_Matrix_assign_BOOL(C, Mask, accum, x, I, ni, J, nj, desc)\n\nAssigns a single scalar to a submatrix, C<Mask>(I,J) = accum(C(I,J),x).  The scalar x is implicitly expanded into a matrix A of size ni-by-nj, with each entry in A equal to x, and then C<Mask>(I,J) = accum(C(I,J),A) is done.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_BOOL ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, bool x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_FP32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_FP32","text":"GrB_Matrix_assign_FP32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_FP32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, float x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_FP64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_FP64","text":"GrB_Matrix_assign_FP64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_FP64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, double x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT16-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT16","text":"GrB_Matrix_assign_INT16(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_INT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT32","text":"GrB_Matrix_assign_INT32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_INT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT64","text":"GrB_Matrix_assign_INT64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_INT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT8-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_INT8","text":"GrB_Matrix_assign_INT8(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_INT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_Scalar-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_Scalar","text":"GrB_Matrix_assign_Scalar(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_Scalar ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, GrB_Scalar x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UDT-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UDT","text":"GrB_Matrix_assign_UDT(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_UDT ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, void *x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT16-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT16","text":"GrB_Matrix_assign_UINT16(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_UINT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT32","text":"GrB_Matrix_assign_UINT32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_UINT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT64","text":"GrB_Matrix_assign_UINT64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_UINT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT8-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_assign_UINT8","text":"GrB_Matrix_assign_UINT8(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_assign_UINT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_BOOL-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_BOOL","text":"GrB_Matrix_build_BOOL(C, I, J, X, nvals, dup)\n\nGrBMatrixbuild:  C = sparse (I,J,X), but using any associative operator to assemble duplicate entries.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_BOOL ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const bool *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_FP32-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_FP32","text":"GrB_Matrix_build_FP32(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_FP32 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const float *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_FP64-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_FP64","text":"GrB_Matrix_build_FP64(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_FP64 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const double *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT16-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT16","text":"GrB_Matrix_build_INT16(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_INT16 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const int16_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT32-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT32","text":"GrB_Matrix_build_INT32(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_INT32 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const int32_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT64-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT64","text":"GrB_Matrix_build_INT64(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_INT64 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const int64_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT8-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_INT8","text":"GrB_Matrix_build_INT8(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_INT8 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const int8_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UDT-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UDT","text":"GrB_Matrix_build_UDT(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_UDT ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const void *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT16-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT16","text":"GrB_Matrix_build_UINT16(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_UINT16 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const uint16_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT32-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT32","text":"GrB_Matrix_build_UINT32(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_UINT32 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const uint32_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT64-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT64","text":"GrB_Matrix_build_UINT64(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_UINT64 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const uint64_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT8-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_build_UINT8","text":"GrB_Matrix_build_UINT8(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_build_UINT8 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const uint8_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_clear-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_clear","text":"GrB_Matrix_clear(A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_clear ( GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_deserialize-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_deserialize","text":"GrB_Matrix_deserialize(C, type, blob, blob_size)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_deserialize ( GrB_Matrix *C, GrB_Type type, const void *blob, GrB_Index blob_size );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_diag-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_diag","text":"GrB_Matrix_diag(C, v, k)\n\nGrBMatrixdiag constructs a new matrix from a vector.  Let n be the length of the v vector, from GrBVectorsize (&n, v).  If k = 0, then C is an n-by-n diagonal matrix with the entries from v along the main diagonal of C, with C(i,i) = v(i).  If k is nonzero, C is square with dimension n+abs(k). If k is positive, it denotes diagonals above the main diagonal, with C(i,i+k) = v(i).  If k is negative, it denotes diagonals below the main diagonal of C, with C(i-k,i) = v(i).  C is constructed with the same type as v.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_diag ( GrB_Matrix *C, const GrB_Vector v, int64_t k );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_dup-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_dup","text":"GrB_Matrix_dup(C, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_dup ( GrB_Matrix *C, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseAdd_BinaryOp-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseAdd_BinaryOp","text":"GrB_Matrix_eWiseAdd_BinaryOp(C, Mask, accum, add, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_eWiseAdd_BinaryOp ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp add, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseAdd_Monoid-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseAdd_Monoid","text":"GrB_Matrix_eWiseAdd_Monoid(C, Mask, accum, monoid, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_eWiseAdd_Monoid ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseAdd_Semiring-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseAdd_Semiring","text":"GrB_Matrix_eWiseAdd_Semiring(C, Mask, accum, semiring, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_eWiseAdd_Semiring ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseMult_BinaryOp-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseMult_BinaryOp","text":"GrB_Matrix_eWiseMult_BinaryOp(C, Mask, accum, mult, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_eWiseMult_BinaryOp ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp mult, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseMult_Monoid-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseMult_Monoid","text":"GrB_Matrix_eWiseMult_Monoid(C, Mask, accum, monoid, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_eWiseMult_Monoid ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseMult_Semiring-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_eWiseMult_Semiring","text":"GrB_Matrix_eWiseMult_Semiring(C, Mask, accum, semiring, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_eWiseMult_Semiring ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_error","text":"GrB_Matrix_error(error, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_error (const char **error, const GrB_Matrix A);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_exportHint-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_exportHint","text":"GrB_Matrix_exportHint(format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_exportHint ( GrB_Format *format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_exportSize-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_exportSize","text":"GrB_Matrix_exportSize(Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_exportSize ( GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_BOOL-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_BOOL","text":"GrB_Matrix_export_BOOL(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nFor GrBMatrixexportT: on input, Aplen, Ailen, and Axlen are the size of the 3 arrays Ap, Ai, and Ax, in terms of the # of entries. On output, these 3 values are modified to be the # of entries copied into those 3 arrays.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_BOOL ( GrB_Index *Ap, GrB_Index *Ai, bool *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_FP32-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_FP32","text":"GrB_Matrix_export_FP32(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_FP32 ( GrB_Index *Ap, GrB_Index *Ai, float *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_FP64-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_FP64","text":"GrB_Matrix_export_FP64(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_FP64 ( GrB_Index *Ap, GrB_Index *Ai, double *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT16-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT16","text":"GrB_Matrix_export_INT16(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_INT16 ( GrB_Index *Ap, GrB_Index *Ai, int16_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT32-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT32","text":"GrB_Matrix_export_INT32(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_INT32 ( GrB_Index *Ap, GrB_Index *Ai, int32_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT64-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT64","text":"GrB_Matrix_export_INT64(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_INT64 ( GrB_Index *Ap, GrB_Index *Ai, int64_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT8-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_INT8","text":"GrB_Matrix_export_INT8(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_INT8 ( GrB_Index *Ap, GrB_Index *Ai, int8_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UDT-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UDT","text":"GrB_Matrix_export_UDT(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_UDT ( GrB_Index *Ap, GrB_Index *Ai, void *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT16-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT16","text":"GrB_Matrix_export_UINT16(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_UINT16 ( GrB_Index *Ap, GrB_Index *Ai, uint16_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT32-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT32","text":"GrB_Matrix_export_UINT32(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_UINT32 ( GrB_Index *Ap, GrB_Index *Ai, uint32_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT64-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT64","text":"GrB_Matrix_export_UINT64(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_UINT64 ( GrB_Index *Ap, GrB_Index *Ai, uint64_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT8-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_export_UINT8","text":"GrB_Matrix_export_UINT8(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_export_UINT8 ( GrB_Index *Ap, GrB_Index *Ai, uint8_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extract-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extract","text":"GrB_Matrix_extract(C, Mask, accum, A, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extract ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Matrix A, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_BOOL-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_BOOL","text":"GrB_Matrix_extractElement_BOOL(x, A, i, j)\n\nExtract a single entry from a matrix, x = A(i,j), typecasting from the type of A to the type of x, as needed.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_BOOL ( bool *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_FP32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_FP32","text":"GrB_Matrix_extractElement_FP32(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_FP32 ( float *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_FP64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_FP64","text":"GrB_Matrix_extractElement_FP64(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_FP64 ( double *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT16","text":"GrB_Matrix_extractElement_INT16(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_INT16 ( int16_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT32","text":"GrB_Matrix_extractElement_INT32(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_INT32 ( int32_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT64","text":"GrB_Matrix_extractElement_INT64(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_INT64 ( int64_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_INT8","text":"GrB_Matrix_extractElement_INT8(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_INT8 ( int8_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_Scalar-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_Scalar","text":"GrB_Matrix_extractElement_Scalar(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_Scalar ( GrB_Scalar x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UDT-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UDT","text":"GrB_Matrix_extractElement_UDT(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_UDT ( void *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT16","text":"GrB_Matrix_extractElement_UINT16(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_UINT16 ( uint16_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT32","text":"GrB_Matrix_extractElement_UINT32(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_UINT32 ( uint32_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT64","text":"GrB_Matrix_extractElement_UINT64(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_UINT64 ( uint64_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractElement_UINT8","text":"GrB_Matrix_extractElement_UINT8(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractElement_UINT8 ( uint8_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_BOOL-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_BOOL","text":"GrB_Matrix_extractTuples_BOOL(I, J, X, nvals, A)\n\nExtracts all tuples from a matrix, like [I,J,X] = find (A).  If any parameter I, J and/or X is NULL, then that component is not extracted. For example, to extract just the row and col indices, pass I and J as non-NULL, and X as NULL.  This is like [I,J,~] = find (A).\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_BOOL ( GrB_Index *I, GrB_Index *J, bool *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_FP32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_FP32","text":"GrB_Matrix_extractTuples_FP32(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_FP32 ( GrB_Index *I, GrB_Index *J, float *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_FP64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_FP64","text":"GrB_Matrix_extractTuples_FP64(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_FP64 ( GrB_Index *I, GrB_Index *J, double *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT16","text":"GrB_Matrix_extractTuples_INT16(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_INT16 ( GrB_Index *I, GrB_Index *J, int16_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT32","text":"GrB_Matrix_extractTuples_INT32(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_INT32 ( GrB_Index *I, GrB_Index *J, int32_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT64","text":"GrB_Matrix_extractTuples_INT64(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_INT64 ( GrB_Index *I, GrB_Index *J, int64_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_INT8","text":"GrB_Matrix_extractTuples_INT8(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_INT8 ( GrB_Index *I, GrB_Index *J, int8_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UDT-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UDT","text":"GrB_Matrix_extractTuples_UDT(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_UDT ( GrB_Index *I, GrB_Index *J, void *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT16","text":"GrB_Matrix_extractTuples_UINT16(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_UINT16 ( GrB_Index *I, GrB_Index *J, uint16_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT32","text":"GrB_Matrix_extractTuples_UINT32(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_UINT32 ( GrB_Index *I, GrB_Index *J, uint32_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT64","text":"GrB_Matrix_extractTuples_UINT64(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_UINT64 ( GrB_Index *I, GrB_Index *J, uint64_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_extractTuples_UINT8","text":"GrB_Matrix_extractTuples_UINT8(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_extractTuples_UINT8 ( GrB_Index *I, GrB_Index *J, uint8_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_free","text":"GrB_Matrix_free(A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_free ( GrB_Matrix *A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_BOOL-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_BOOL","text":"GrB_Matrix_import_BOOL(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_BOOL ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const bool *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_FP32-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_FP32","text":"GrB_Matrix_import_FP32(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_FP32 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const float *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_FP64-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_FP64","text":"GrB_Matrix_import_FP64(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_FP64 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const double *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT16-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT16","text":"GrB_Matrix_import_INT16(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_INT16 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const int16_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT32-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT32","text":"GrB_Matrix_import_INT32(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_INT32 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const int32_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT64-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT64","text":"GrB_Matrix_import_INT64(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_INT64 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const int64_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT8-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_INT8","text":"GrB_Matrix_import_INT8(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_INT8 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const int8_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UDT-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UDT","text":"GrB_Matrix_import_UDT(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_UDT ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const void *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT16-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT16","text":"GrB_Matrix_import_UINT16(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_UINT16 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const uint16_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT32-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT32","text":"GrB_Matrix_import_UINT32(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_UINT32 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const uint32_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT64-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT64","text":"GrB_Matrix_import_UINT64(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_UINT64 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const uint64_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT8-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_import_UINT8","text":"GrB_Matrix_import_UINT8(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_import_UINT8 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const uint8_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_kronecker_BinaryOp-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_kronecker_BinaryOp","text":"GrB_Matrix_kronecker_BinaryOp(C, M, accum, op, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_kronecker_BinaryOp ( GrB_Matrix C, const GrB_Matrix M, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_kronecker_Monoid-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_kronecker_Monoid","text":"GrB_Matrix_kronecker_Monoid(C, M, accum, monoid, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_kronecker_Monoid ( GrB_Matrix C, const GrB_Matrix M, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_kronecker_Semiring-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_kronecker_Semiring","text":"GrB_Matrix_kronecker_Semiring(C, M, accum, semiring, A, B, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_kronecker_Semiring ( GrB_Matrix C, const GrB_Matrix M, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_ncols-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_ncols","text":"GrB_Matrix_ncols(ncols, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_ncols ( GrB_Index *ncols, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_new-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_new","text":"GrB_Matrix_new(A, type, nrows, ncols)\n\nThese methods create, free, copy, and clear a matrix.  The nrows, ncols, nvals, and type methods return basic information about a matrix.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_new ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_nrows-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_nrows","text":"GrB_Matrix_nrows(nrows, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_nrows ( GrB_Index *nrows, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_nvals-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_nvals","text":"GrB_Matrix_nvals(nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_nvals ( GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_BOOL-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_BOOL","text":"GrB_Matrix_reduce_BOOL(c, accum, monoid, A, desc)\n\nReduce entries in a matrix to a scalar, c = accum (c, reducetoscalar(A))\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_BOOL ( bool *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_BinaryOp-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_BinaryOp","text":"GrB_Matrix_reduce_BinaryOp(w, mask, accum, op, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_BinaryOp ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_BinaryOp_Scalar-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_BinaryOp_Scalar","text":"GrB_Matrix_reduce_BinaryOp_Scalar(S, accum, op, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_BinaryOp_Scalar ( GrB_Scalar S, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_FP32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_FP32","text":"GrB_Matrix_reduce_FP32(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_FP32 ( float *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_FP64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_FP64","text":"GrB_Matrix_reduce_FP64(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_FP64 ( double *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT16","text":"GrB_Matrix_reduce_INT16(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_INT16 ( int16_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT32","text":"GrB_Matrix_reduce_INT32(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_INT32 ( int32_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT64","text":"GrB_Matrix_reduce_INT64(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_INT64 ( int64_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_INT8","text":"GrB_Matrix_reduce_INT8(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_INT8 ( int8_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_Monoid-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_Monoid","text":"GrB_Matrix_reduce_Monoid(w, mask, accum, monoid, A, desc)\n\nFor GrBMatrixreduceBinaryOp, the GrBBinaryOp op must correspond to a known built-in monoid:\n\n operator                data-types (all built-in)\n ----------------------  ---------------------------\n MIN, MAX                INT*, UINT*, FP*\n TIMES, PLUS             INT*, UINT*, FP*, FC*\n ANY                     INT*, UINT*, FP*, FC*, BOOL\n LOR, LAND, LXOR, EQ     BOOL\n\nBOR, BAND, BXOR, BXNOR  UINT*\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_Monoid ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_Monoid_Scalar-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_Monoid_Scalar","text":"GrB_Matrix_reduce_Monoid_Scalar(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_Monoid_Scalar ( GrB_Scalar c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UDT-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UDT","text":"GrB_Matrix_reduce_UDT(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_UDT ( void *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT16","text":"GrB_Matrix_reduce_UINT16(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_UINT16 ( uint16_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT32","text":"GrB_Matrix_reduce_UINT32(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_UINT32 ( uint32_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT64","text":"GrB_Matrix_reduce_UINT64(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_UINT64 ( uint64_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_reduce_UINT8","text":"GrB_Matrix_reduce_UINT8(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_reduce_UINT8 ( uint8_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_removeElement-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_removeElement","text":"GrB_Matrix_removeElement(C, i, j)\n\nGrBMatrixremoveElement (A,i,j) removes the entry A(i,j) from the matrix A.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_removeElement ( GrB_Matrix C, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_resize-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_resize","text":"GrB_Matrix_resize(C, nrows_new, ncols_new)\n\nIf the dimensions decrease, entries that fall outside the resized matrix or vector are deleted.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_resize ( GrB_Matrix C, GrB_Index nrows_new, GrB_Index ncols_new );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_BOOL","text":"GrB_Matrix_select_BOOL(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_BOOL ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, bool y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_FP32","text":"GrB_Matrix_select_FP32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_FP32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, float y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_FP64","text":"GrB_Matrix_select_FP64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_FP64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, double y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT16","text":"GrB_Matrix_select_INT16(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_INT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT32","text":"GrB_Matrix_select_INT32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_INT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT64","text":"GrB_Matrix_select_INT64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_INT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_INT8","text":"GrB_Matrix_select_INT8(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_INT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, int8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_Scalar","text":"GrB_Matrix_select_Scalar(C, Mask, accum, op, A, y, desc)\n\n\n\nmatrix select using an IndexUnaryOp\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_Scalar ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UDT","text":"GrB_Matrix_select_UDT(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_UDT ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, const void *y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT16","text":"GrB_Matrix_select_UINT16(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_UINT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT32","text":"GrB_Matrix_select_UINT32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_UINT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT64","text":"GrB_Matrix_select_UINT64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_UINT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_select_UINT8","text":"GrB_Matrix_select_UINT8(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_select_UINT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, uint8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_serialize-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_serialize","text":"GrB_Matrix_serialize(blob, blob_size_handle, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_serialize ( void *blob, GrB_Index *blob_size_handle, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_serializeSize-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_serializeSize","text":"GrB_Matrix_serializeSize(blob_size_handle, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_serializeSize ( GrB_Index *blob_size_handle, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_BOOL-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_BOOL","text":"GrB_Matrix_setElement_BOOL(C, x, i, j)\n\nSet a single entry in a matrix, C(i,j) = x, typecasting from the type of x to the type of C, as needed.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_BOOL ( GrB_Matrix C, bool x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_FP32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_FP32","text":"GrB_Matrix_setElement_FP32(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_FP32 ( GrB_Matrix C, float x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_FP64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_FP64","text":"GrB_Matrix_setElement_FP64(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_FP64 ( GrB_Matrix C, double x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT16","text":"GrB_Matrix_setElement_INT16(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_INT16 ( GrB_Matrix C, int16_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT32","text":"GrB_Matrix_setElement_INT32(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_INT32 ( GrB_Matrix C, int32_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT64","text":"GrB_Matrix_setElement_INT64(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_INT64 ( GrB_Matrix C, int64_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_INT8","text":"GrB_Matrix_setElement_INT8(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_INT8 ( GrB_Matrix C, int8_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_Scalar-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_Scalar","text":"GrB_Matrix_setElement_Scalar(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_Scalar ( GrB_Matrix C, GrB_Scalar x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UDT-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UDT","text":"GrB_Matrix_setElement_UDT(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_UDT ( GrB_Matrix C, void *x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT16","text":"GrB_Matrix_setElement_UINT16(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_UINT16 ( GrB_Matrix C, uint16_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT32","text":"GrB_Matrix_setElement_UINT32(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_UINT32 ( GrB_Matrix C, uint32_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT64","text":"GrB_Matrix_setElement_UINT64(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_UINT64 ( GrB_Matrix C, uint64_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_setElement_UINT8","text":"GrB_Matrix_setElement_UINT8(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_setElement_UINT8 ( GrB_Matrix C, uint8_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Matrix_wait","text":"GrB_Matrix_wait(A, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Matrix_wait (GrB_Matrix A , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_error","text":"GrB_Monoid_error(error, monoid)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_error (const char **error, const GrB_Monoid monoid);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_free","text":"GrB_Monoid_free(monoid)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_free ( GrB_Monoid *monoid );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_BOOL-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_BOOL","text":"GrB_Monoid_new_BOOL(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_BOOL ( GrB_Monoid *monoid, GrB_BinaryOp op, bool identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_FP32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_FP32","text":"GrB_Monoid_new_FP32(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_FP32 ( GrB_Monoid *monoid, GrB_BinaryOp op, float identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_FP64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_FP64","text":"GrB_Monoid_new_FP64(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_FP64 ( GrB_Monoid *monoid, GrB_BinaryOp op, double identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT16-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT16","text":"GrB_Monoid_new_INT16(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_INT16 ( GrB_Monoid *monoid, GrB_BinaryOp op, int16_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT32","text":"GrB_Monoid_new_INT32(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_INT32 ( GrB_Monoid *monoid, GrB_BinaryOp op, int32_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT64","text":"GrB_Monoid_new_INT64(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_INT64 ( GrB_Monoid *monoid, GrB_BinaryOp op, int64_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT8-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_INT8","text":"GrB_Monoid_new_INT8(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_INT8 ( GrB_Monoid *monoid, GrB_BinaryOp op, int8_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UDT-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UDT","text":"GrB_Monoid_new_UDT(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_UDT ( GrB_Monoid *monoid, GrB_BinaryOp op, void *identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT16-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT16","text":"GrB_Monoid_new_UINT16(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_UINT16 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint16_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT32","text":"GrB_Monoid_new_UINT32(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_UINT32 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint32_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT64","text":"GrB_Monoid_new_UINT64(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_UINT64 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint64_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT8-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_new_UINT8","text":"GrB_Monoid_new_UINT8(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_new_UINT8 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint8_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Monoid_wait","text":"GrB_Monoid_wait(monoid, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Monoid_wait (GrB_Monoid monoid , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Row_assign-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Row_assign","text":"GrB_Row_assign(C, mask, accum, u, i, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Row_assign ( GrB_Matrix C, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Vector u, GrB_Index i, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_clear-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_clear","text":"GrB_Scalar_clear(s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_clear ( GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_dup-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_dup","text":"GrB_Scalar_dup(s, t)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_dup ( GrB_Scalar *s, const GrB_Scalar t );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_error","text":"GrB_Scalar_error(error, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_error (const char **error, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_BOOL-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_BOOL","text":"GrB_Scalar_extractElement_BOOL(x, s)\n\nExtract a single entry from a GrB_Scalar, x = s, typecasting from the type of s to the type of x as needed.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_BOOL ( bool *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_FP32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_FP32","text":"GrB_Scalar_extractElement_FP32(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_FP32 ( float *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_FP64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_FP64","text":"GrB_Scalar_extractElement_FP64(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_FP64 ( double *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT16","text":"GrB_Scalar_extractElement_INT16(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_INT16 ( int16_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT32","text":"GrB_Scalar_extractElement_INT32(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_INT32 ( int32_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT64","text":"GrB_Scalar_extractElement_INT64(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_INT64 ( int64_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_INT8","text":"GrB_Scalar_extractElement_INT8(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_INT8 ( int8_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UDT-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UDT","text":"GrB_Scalar_extractElement_UDT(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_UDT ( void *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT16","text":"GrB_Scalar_extractElement_UINT16(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_UINT16 ( uint16_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT32","text":"GrB_Scalar_extractElement_UINT32(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_UINT32 ( uint32_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT64","text":"GrB_Scalar_extractElement_UINT64(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_UINT64 ( uint64_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_extractElement_UINT8","text":"GrB_Scalar_extractElement_UINT8(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_extractElement_UINT8 ( uint8_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_free","text":"GrB_Scalar_free(s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_free ( GrB_Scalar *s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_new-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_new","text":"GrB_Scalar_new(s, type)\n\nThese methods create, free, copy, and clear a GrBScalar.  The nvals, and type methods return basic information about a GrBScalar.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_new ( GrB_Scalar *s, GrB_Type type );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_nvals-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_nvals","text":"GrB_Scalar_nvals(nvals, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_nvals ( GrB_Index *nvals, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_BOOL-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_BOOL","text":"GrB_Scalar_setElement_BOOL(s, x)\n\nSet a single GrB_Scalar s, from a user scalar x: s = x, typecasting from the type of x to the type of w as needed.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_BOOL ( GrB_Scalar s, bool x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_FP32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_FP32","text":"GrB_Scalar_setElement_FP32(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_FP32 ( GrB_Scalar s, float x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_FP64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_FP64","text":"GrB_Scalar_setElement_FP64(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_FP64 ( GrB_Scalar s, double x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT16","text":"GrB_Scalar_setElement_INT16(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_INT16 ( GrB_Scalar s, int16_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT32","text":"GrB_Scalar_setElement_INT32(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_INT32 ( GrB_Scalar s, int32_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT64","text":"GrB_Scalar_setElement_INT64(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_INT64 ( GrB_Scalar s, int64_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_INT8","text":"GrB_Scalar_setElement_INT8(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_INT8 ( GrB_Scalar s, int8_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UDT-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UDT","text":"GrB_Scalar_setElement_UDT(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_UDT ( GrB_Scalar s, void *x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT16","text":"GrB_Scalar_setElement_UINT16(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_UINT16 ( GrB_Scalar s, uint16_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT32","text":"GrB_Scalar_setElement_UINT32(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_UINT32 ( GrB_Scalar s, uint32_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT64","text":"GrB_Scalar_setElement_UINT64(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_UINT64 ( GrB_Scalar s, uint64_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_setElement_UINT8","text":"GrB_Scalar_setElement_UINT8(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_setElement_UINT8 ( GrB_Scalar s, uint8_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Scalar_wait","text":"GrB_Scalar_wait(s, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Scalar_wait (GrB_Scalar s , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_error","text":"GrB_Semiring_error(error, semiring)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Semiring_error (const char **error, const GrB_Semiring semiring);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_free","text":"GrB_Semiring_free(semiring)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Semiring_free ( GrB_Semiring *semiring );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_new-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_new","text":"GrB_Semiring_new(semiring, add, multiply)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Semiring_new ( GrB_Semiring *semiring, GrB_Monoid add, GrB_BinaryOp multiply );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Semiring_wait","text":"GrB_Semiring_wait(semiring, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Semiring_wait (GrB_Semiring semiring, GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type_error","text":"GrB_Type_error(error, type)\n\nEach GraphBLAS method and operation returns a GrBInfo error code. GrBerror returns additional information on the error in a thread-safe null-terminated string.  The string returned by GrB_error is owned by the GraphBLAS library and must not be free'd.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Type_error (const char **error, const GrB_Type type);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type_free","text":"GrB_Type_free(type)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Type_free ( GrB_Type *type );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Type_wait","text":"GrB_Type_wait(type, waitmode)\n\nFinish all pending work in a specific object.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Type_wait (GrB_Type type , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp_error","text":"GrB_UnaryOp_error(error, op)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_UnaryOp_error (const char **error, const GrB_UnaryOp op);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp_free","text":"GrB_UnaryOp_free(unaryop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_UnaryOp_free ( GrB_UnaryOp *unaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_UnaryOp_wait","text":"GrB_UnaryOp_wait(op, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_UnaryOp_wait (GrB_UnaryOp op , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply","text":"GrB_Vector_apply(w, mask, accum, op, u, desc)\n\nApply a unary, index_unary, or binary operator to entries in a matrix or vector, C<M> = accum (C, op (A)).\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_UnaryOp op, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_BOOL","text":"GrB_Vector_apply_BinaryOp1st_BOOL(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_BOOL ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, bool x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_FP32","text":"GrB_Vector_apply_BinaryOp1st_FP32(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_FP32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, float x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_FP64","text":"GrB_Vector_apply_BinaryOp1st_FP64(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_FP64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, double x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT16","text":"GrB_Vector_apply_BinaryOp1st_INT16(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_INT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int16_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT32","text":"GrB_Vector_apply_BinaryOp1st_INT32(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_INT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int32_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT64","text":"GrB_Vector_apply_BinaryOp1st_INT64(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_INT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int64_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_INT8","text":"GrB_Vector_apply_BinaryOp1st_INT8(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_INT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, int8_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_Scalar","text":"GrB_Vector_apply_BinaryOp1st_Scalar(w, mask, accum, op, x, u, desc)\n\nApply a binary operator to the entries in a vector, binding the first input to a scalar x, w<mask> = accum (w, op (x,u)).\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_Scalar ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Scalar x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UDT","text":"GrB_Vector_apply_BinaryOp1st_UDT(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_UDT ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const void *x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT16","text":"GrB_Vector_apply_BinaryOp1st_UINT16(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_UINT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint16_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT32","text":"GrB_Vector_apply_BinaryOp1st_UINT32(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_UINT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint32_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT64","text":"GrB_Vector_apply_BinaryOp1st_UINT64(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_UINT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint64_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp1st_UINT8","text":"GrB_Vector_apply_BinaryOp1st_UINT8(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp1st_UINT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, uint8_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_BOOL","text":"GrB_Vector_apply_BinaryOp2nd_BOOL(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_BOOL ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, bool y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_FP32","text":"GrB_Vector_apply_BinaryOp2nd_FP32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_FP32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, float y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_FP64","text":"GrB_Vector_apply_BinaryOp2nd_FP64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_FP64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, double y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT16","text":"GrB_Vector_apply_BinaryOp2nd_INT16(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_INT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, int16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT32","text":"GrB_Vector_apply_BinaryOp2nd_INT32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_INT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, int32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT64","text":"GrB_Vector_apply_BinaryOp2nd_INT64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_INT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, int64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_INT8","text":"GrB_Vector_apply_BinaryOp2nd_INT8(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_INT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, int8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_Scalar","text":"GrB_Vector_apply_BinaryOp2nd_Scalar(w, mask, accum, op, u, y, desc)\n\nApply a binary operator to the entries in a vector, binding the second input to a scalar y, w<mask> = accum (w, op (u,y)).\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_Scalar ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UDT","text":"GrB_Vector_apply_BinaryOp2nd_UDT(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_UDT ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, const void *y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT16","text":"GrB_Vector_apply_BinaryOp2nd_UINT16(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_UINT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, uint16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT32","text":"GrB_Vector_apply_BinaryOp2nd_UINT32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_UINT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, uint32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT64","text":"GrB_Vector_apply_BinaryOp2nd_UINT64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_UINT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, uint64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_BinaryOp2nd_UINT8","text":"GrB_Vector_apply_BinaryOp2nd_UINT8(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_BinaryOp2nd_UINT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, uint8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_BOOL","text":"GrB_Vector_apply_IndexOp_BOOL(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_BOOL ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, bool y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_FP32","text":"GrB_Vector_apply_IndexOp_FP32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_FP32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, float y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_FP64","text":"GrB_Vector_apply_IndexOp_FP64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_FP64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, double y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT16","text":"GrB_Vector_apply_IndexOp_INT16(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_INT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT32","text":"GrB_Vector_apply_IndexOp_INT32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_INT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT64","text":"GrB_Vector_apply_IndexOp_INT64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_INT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_INT8","text":"GrB_Vector_apply_IndexOp_INT8(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_INT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_Scalar","text":"GrB_Vector_apply_IndexOp_Scalar(w, mask, accum, op, u, y, desc)\n\nApply a GrB_IndexUnaryOp to the entries in a vector\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_Scalar ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UDT","text":"GrB_Vector_apply_IndexOp_UDT(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_UDT ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, const void *y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT16","text":"GrB_Vector_apply_IndexOp_UINT16(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_UINT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT32","text":"GrB_Vector_apply_IndexOp_UINT32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_UINT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT64","text":"GrB_Vector_apply_IndexOp_UINT64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_UINT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_apply_IndexOp_UINT8","text":"GrB_Vector_apply_IndexOp_UINT8(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_apply_IndexOp_UINT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign","text":"GrB_Vector_assign(w, mask, accum, u, I, ni, desc)\n\nAssign entries in a matrix or vector; C(I,J) = A. Each of these can be used with their generic name, GrB_assign.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Vector u, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_BOOL","text":"GrB_Vector_assign_BOOL(w, mask, accum, x, I, ni, desc)\n\nAssigns a single scalar to a subvector, w<mask>(I) = accum(w(I),x).  The scalar x is implicitly expanded into a vector u of size ni-by-1, with each entry in u equal to x, and then w<mask>(I) = accum(w(I),u) is done.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_BOOL ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, bool x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_FP32","text":"GrB_Vector_assign_FP32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_FP32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, float x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_FP64","text":"GrB_Vector_assign_FP64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_FP64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, double x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT16","text":"GrB_Vector_assign_INT16(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_INT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT32","text":"GrB_Vector_assign_INT32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_INT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT64","text":"GrB_Vector_assign_INT64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_INT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_INT8","text":"GrB_Vector_assign_INT8(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_INT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_Scalar","text":"GrB_Vector_assign_Scalar(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_Scalar ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, GrB_Scalar x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UDT","text":"GrB_Vector_assign_UDT(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_UDT ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, void *x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT16","text":"GrB_Vector_assign_UINT16(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_UINT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT32","text":"GrB_Vector_assign_UINT32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_UINT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT64","text":"GrB_Vector_assign_UINT64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_UINT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_assign_UINT8","text":"GrB_Vector_assign_UINT8(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_assign_UINT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_BOOL-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_BOOL","text":"GrB_Vector_build_BOOL(w, I, X, nvals, dup)\n\nGrBVectorbuild:  w = sparse (I,1,X), but using any associative operator to assemble duplicate entries.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_BOOL ( GrB_Vector w, const GrB_Index *I, const bool *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_FP32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_FP32","text":"GrB_Vector_build_FP32(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_FP32 ( GrB_Vector w, const GrB_Index *I, const float *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_FP64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_FP64","text":"GrB_Vector_build_FP64(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_FP64 ( GrB_Vector w, const GrB_Index *I, const double *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT16","text":"GrB_Vector_build_INT16(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_INT16 ( GrB_Vector w, const GrB_Index *I, const int16_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT32","text":"GrB_Vector_build_INT32(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_INT32 ( GrB_Vector w, const GrB_Index *I, const int32_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT64","text":"GrB_Vector_build_INT64(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_INT64 ( GrB_Vector w, const GrB_Index *I, const int64_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_INT8","text":"GrB_Vector_build_INT8(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_INT8 ( GrB_Vector w, const GrB_Index *I, const int8_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UDT-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UDT","text":"GrB_Vector_build_UDT(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_UDT ( GrB_Vector w, const GrB_Index *I, const void *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT16","text":"GrB_Vector_build_UINT16(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_UINT16 ( GrB_Vector w, const GrB_Index *I, const uint16_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT32","text":"GrB_Vector_build_UINT32(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_UINT32 ( GrB_Vector w, const GrB_Index *I, const uint32_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT64","text":"GrB_Vector_build_UINT64(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_UINT64 ( GrB_Vector w, const GrB_Index *I, const uint64_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_build_UINT8","text":"GrB_Vector_build_UINT8(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_build_UINT8 ( GrB_Vector w, const GrB_Index *I, const uint8_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_clear-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_clear","text":"GrB_Vector_clear(v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_clear ( GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_dup-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_dup","text":"GrB_Vector_dup(w, u)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_dup ( GrB_Vector *w, const GrB_Vector u );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseAdd_BinaryOp-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseAdd_BinaryOp","text":"GrB_Vector_eWiseAdd_BinaryOp(w, mask, accum, add, u, v, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_eWiseAdd_BinaryOp ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp add, const GrB_Vector u, const GrB_Vector v, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseAdd_Monoid-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseAdd_Monoid","text":"GrB_Vector_eWiseAdd_Monoid(w, mask, accum, monoid, u, v, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_eWiseAdd_Monoid ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Vector v, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseAdd_Semiring-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseAdd_Semiring","text":"GrB_Vector_eWiseAdd_Semiring(w, mask, accum, semiring, u, v, desc)\n\nGrB_eWiseAdd computes C<Mask> = accum (C, A+B), where pairs of elements in two matrices (or two vectors) are pairwise \"added\".\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_eWiseAdd_Semiring ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Vector u, const GrB_Vector v, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseMult_BinaryOp-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseMult_BinaryOp","text":"GrB_Vector_eWiseMult_BinaryOp(w, mask, accum, mult, u, v, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_eWiseMult_BinaryOp ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp mult, const GrB_Vector u, const GrB_Vector v, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseMult_Monoid-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseMult_Monoid","text":"GrB_Vector_eWiseMult_Monoid(w, mask, accum, monoid, u, v, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_eWiseMult_Monoid ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Vector v, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseMult_Semiring-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_eWiseMult_Semiring","text":"GrB_Vector_eWiseMult_Semiring(w, mask, accum, semiring, u, v, desc)\n\nGrB_eWiseMult computes C<Mask> = accum (C, A.B), where \".\" is the Hadamard product, and where pairs of elements in two matrices (or vectors) are pairwise \"multiplied\" with C(i,j) = mult (A(i,j),B(i,j)).\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_eWiseMult_Semiring ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Vector u, const GrB_Vector v, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_error","text":"GrB_Vector_error(error, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_error (const char **error, const GrB_Vector v);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extract-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extract","text":"GrB_Vector_extract(w, mask, accum, u, I, ni, desc)\n\nGrBIndex I [3], ni = GxBBACKWARDS ;      I [GxBBEGIN ] = 10 ;               // the start of the sequence      I [GxBINC   ] = 2 ;                // the magnitude of the increment I [GxB_END   ] = 1 ;                // the end of the sequence\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extract ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Vector u, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_BOOL-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_BOOL","text":"GrB_Vector_extractElement_BOOL(x, v, i)\n\nExtract a single entry from a vector, x = v(i), typecasting from the type of v to the type of x as needed.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_BOOL ( bool *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_FP32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_FP32","text":"GrB_Vector_extractElement_FP32(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_FP32 ( float *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_FP64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_FP64","text":"GrB_Vector_extractElement_FP64(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_FP64 ( double *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT16-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT16","text":"GrB_Vector_extractElement_INT16(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_INT16 ( int16_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT32","text":"GrB_Vector_extractElement_INT32(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_INT32 ( int32_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT64","text":"GrB_Vector_extractElement_INT64(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_INT64 ( int64_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT8-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_INT8","text":"GrB_Vector_extractElement_INT8(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_INT8 ( int8_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_Scalar-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_Scalar","text":"GrB_Vector_extractElement_Scalar(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_Scalar ( GrB_Scalar x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UDT-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UDT","text":"GrB_Vector_extractElement_UDT(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_UDT ( void *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT16-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT16","text":"GrB_Vector_extractElement_UINT16(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_UINT16 ( uint16_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT32","text":"GrB_Vector_extractElement_UINT32(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_UINT32 ( uint32_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT64","text":"GrB_Vector_extractElement_UINT64(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_UINT64 ( uint64_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT8-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractElement_UINT8","text":"GrB_Vector_extractElement_UINT8(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractElement_UINT8 ( uint8_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_BOOL-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_BOOL","text":"GrB_Vector_extractTuples_BOOL(I, X, nvals, v)\n\nExtracts all tuples from a vector, like [I,~,X] = find (v).  If any parameter I and/or X is NULL, then that component is not extracted.  For example, to extract just the row indices, pass I as non-NULL, and X as NULL. This is like [I,~,~] = find (v).\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_BOOL ( GrB_Index *I, bool *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_FP32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_FP32","text":"GrB_Vector_extractTuples_FP32(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_FP32 ( GrB_Index *I, float *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_FP64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_FP64","text":"GrB_Vector_extractTuples_FP64(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_FP64 ( GrB_Index *I, double *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT16","text":"GrB_Vector_extractTuples_INT16(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_INT16 ( GrB_Index *I, int16_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT32","text":"GrB_Vector_extractTuples_INT32(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_INT32 ( GrB_Index *I, int32_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT64","text":"GrB_Vector_extractTuples_INT64(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_INT64 ( GrB_Index *I, int64_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_INT8","text":"GrB_Vector_extractTuples_INT8(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_INT8 ( GrB_Index *I, int8_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UDT-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UDT","text":"GrB_Vector_extractTuples_UDT(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_UDT ( GrB_Index *I, void *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT16","text":"GrB_Vector_extractTuples_UINT16(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_UINT16 ( GrB_Index *I, uint16_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT32","text":"GrB_Vector_extractTuples_UINT32(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_UINT32 ( GrB_Index *I, uint32_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT64","text":"GrB_Vector_extractTuples_UINT64(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_UINT64 ( GrB_Index *I, uint64_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_extractTuples_UINT8","text":"GrB_Vector_extractTuples_UINT8(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_extractTuples_UINT8 ( GrB_Index *I, uint8_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_free","text":"GrB_Vector_free(v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_free ( GrB_Vector *v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_new-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_new","text":"GrB_Vector_new(v, type, n)\n\nThese methods create, free, copy, and clear a vector.  The size, nvals, and type methods return basic information about a vector.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_new ( GrB_Vector *v, GrB_Type type, GrB_Index n );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_nvals-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_nvals","text":"GrB_Vector_nvals(nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_nvals ( GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_BOOL-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_BOOL","text":"GrB_Vector_reduce_BOOL(c, accum, monoid, u, desc)\n\nReduce entries in a vector to a scalar, c = accum (c, reducetoscalar(u))\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_BOOL ( bool *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_BinaryOp_Scalar-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_BinaryOp_Scalar","text":"GrB_Vector_reduce_BinaryOp_Scalar(c, accum, op, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_BinaryOp_Scalar ( GrB_Scalar c, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_FP32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_FP32","text":"GrB_Vector_reduce_FP32(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_FP32 ( float *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_FP64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_FP64","text":"GrB_Vector_reduce_FP64(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_FP64 ( double *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT16","text":"GrB_Vector_reduce_INT16(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_INT16 ( int16_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT32","text":"GrB_Vector_reduce_INT32(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_INT32 ( int32_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT64","text":"GrB_Vector_reduce_INT64(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_INT64 ( int64_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_INT8","text":"GrB_Vector_reduce_INT8(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_INT8 ( int8_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_Monoid_Scalar-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_Monoid_Scalar","text":"GrB_Vector_reduce_Monoid_Scalar(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_Monoid_Scalar ( GrB_Scalar c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UDT-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UDT","text":"GrB_Vector_reduce_UDT(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_UDT ( void *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT16-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT16","text":"GrB_Vector_reduce_UINT16(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_UINT16 ( uint16_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT32","text":"GrB_Vector_reduce_UINT32(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_UINT32 ( uint32_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT64","text":"GrB_Vector_reduce_UINT64(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_UINT64 ( uint64_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT8-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_reduce_UINT8","text":"GrB_Vector_reduce_UINT8(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_reduce_UINT8 ( uint8_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_removeElement-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_removeElement","text":"GrB_Vector_removeElement(v, i)\n\nGrBVectorremoveElement (v,i) removes the element v(i) from the vector v.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_removeElement ( GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_resize-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_resize","text":"GrB_Vector_resize(w, nrows_new)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_resize ( GrB_Vector w, GrB_Index nrows_new );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_BOOL","text":"GrB_Vector_select_BOOL(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_BOOL ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, bool y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_FP32","text":"GrB_Vector_select_FP32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_FP32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, float y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_FP64","text":"GrB_Vector_select_FP64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_FP64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, double y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT16","text":"GrB_Vector_select_INT16(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_INT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT32","text":"GrB_Vector_select_INT32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_INT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT64","text":"GrB_Vector_select_INT64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_INT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_INT8","text":"GrB_Vector_select_INT8(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_INT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, int8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_Scalar","text":"GrB_Vector_select_Scalar(w, mask, accum, op, u, y, desc)\n\n\n\nvector select using an IndexUnaryOp\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_Scalar ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UDT","text":"GrB_Vector_select_UDT(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_UDT ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, const void *y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT16","text":"GrB_Vector_select_UINT16(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_UINT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint16_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT32","text":"GrB_Vector_select_UINT32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_UINT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT64","text":"GrB_Vector_select_UINT64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_UINT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_select_UINT8","text":"GrB_Vector_select_UINT8(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_select_UINT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, uint8_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_BOOL-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_BOOL","text":"GrB_Vector_setElement_BOOL(w, x, i)\n\nSet a single scalar in a vector, w(i) = x, typecasting from the type of x to the type of w as needed.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_BOOL ( GrB_Vector w, bool x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_FP32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_FP32","text":"GrB_Vector_setElement_FP32(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_FP32 ( GrB_Vector w, float x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_FP64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_FP64","text":"GrB_Vector_setElement_FP64(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_FP64 ( GrB_Vector w, double x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT16-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT16","text":"GrB_Vector_setElement_INT16(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_INT16 ( GrB_Vector w, int16_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT32","text":"GrB_Vector_setElement_INT32(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_INT32 ( GrB_Vector w, int32_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT64","text":"GrB_Vector_setElement_INT64(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_INT64 ( GrB_Vector w, int64_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT8-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_INT8","text":"GrB_Vector_setElement_INT8(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_INT8 ( GrB_Vector w, int8_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_Scalar-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_Scalar","text":"GrB_Vector_setElement_Scalar(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_Scalar ( GrB_Vector w, GrB_Scalar x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UDT-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UDT","text":"GrB_Vector_setElement_UDT(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_UDT ( GrB_Vector w, void *x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT16-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT16","text":"GrB_Vector_setElement_UINT16(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_UINT16 ( GrB_Vector w, uint16_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT32","text":"GrB_Vector_setElement_UINT32(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_UINT32 ( GrB_Vector w, uint32_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT64","text":"GrB_Vector_setElement_UINT64(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_UINT64 ( GrB_Vector w, uint64_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT8-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_setElement_UINT8","text":"GrB_Vector_setElement_UINT8(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_setElement_UINT8 ( GrB_Vector w, uint8_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_size-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_size","text":"GrB_Vector_size(n, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_size ( GrB_Index *n, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_Vector_wait","text":"GrB_Vector_wait(v, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_Vector_wait (GrB_Vector v , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_finalize-Tuple{}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_finalize","text":"GrB_finalize()\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_finalize (void);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_getVersion-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_getVersion","text":"GrB_getVersion(version, subversion)\n\nGrB_getVersion provides a runtime access of the C API Version.\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_getVersion ( unsigned int *version, unsigned int *subversion );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_init-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_init","text":"GrB_init(mode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_init ( GrB_Mode mode );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_mxm-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_mxm","text":"GrB_mxm(C, Mask, accum, semiring, A, B, desc)\n\n============================================================================== GrB_mxm, vxm, mxv: matrix multiplication over a semiring ==============================================================================\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_mxm ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_mxv-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_mxv","text":"GrB_mxv(w, mask, accum, semiring, A, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_mxv ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Matrix A, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_transpose-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_transpose","text":"GrB_transpose(C, Mask, accum, A, desc)\n\n============================================================================== GrB_transpose: matrix transpose ==============================================================================\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_transpose ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GrB_vxm-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GrB_vxm","text":"GrB_vxm(w, mask, accum, semiring, u, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GrB_vxm ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Semiring semiring, const GrB_Vector u, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_fprint","text":"GxB_BinaryOp_fprint(binaryop, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_fprint ( GrB_BinaryOp binaryop, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_new-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_new","text":"GxB_BinaryOp_new(op, _function, ztype, xtype, ytype, binop_name, binop_defn)\n\nGxBBinaryOpnew creates a named user-defined binary op.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_new ( GrB_BinaryOp *op, GxB_binary_function function, GrB_Type ztype, GrB_Type xtype, GrB_Type ytype, const char *binop_name, const char *binop_defn );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_xtype-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_xtype","text":"GxB_BinaryOp_xtype(xtype, binaryop)\n\nNOTE: GxBBinaryOpxtype is historical.  Use GxBBinaryOpxtype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_xtype ( GrB_Type *xtype, GrB_BinaryOp binaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_xtype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_xtype_name","text":"GxB_BinaryOp_xtype_name(type_name, binaryop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_xtype_name ( char *type_name, const GrB_BinaryOp binaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ytype-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ytype","text":"GxB_BinaryOp_ytype(ytype, binaryop)\n\nNOTE: GxBBinaryOpytype is historical.  Use GxBBinaryOpytype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_ytype ( GrB_Type *ytype, GrB_BinaryOp binaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ytype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ytype_name","text":"GxB_BinaryOp_ytype_name(type_name, binaryop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_ytype_name ( char *type_name, const GrB_BinaryOp binaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ztype-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ztype","text":"GxB_BinaryOp_ztype(ztype, binaryop)\n\nNOTE: GxBBinaryOpztype is historical.  Use GxBBinaryOpztype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_ztype ( GrB_Type *ztype, GrB_BinaryOp binaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ztype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_BinaryOp_ztype_name","text":"GxB_BinaryOp_ztype_name(type_name, binaryop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_BinaryOp_ztype_name ( char *type_name, const GrB_BinaryOp binaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Col_subassign-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Col_subassign","text":"GxB_Col_subassign(C, mask, accum, u, I, ni, j, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Col_subassign ( GrB_Matrix C, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Vector u, const GrB_Index *I, GrB_Index ni, GrB_Index j, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Descriptor_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Descriptor_fprint","text":"GxB_Descriptor_fprint(descriptor, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Descriptor_fprint ( GrB_Descriptor descriptor, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Descriptor_get-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Descriptor_get","text":"GxB_Descriptor_get(val, desc, field)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Descriptor_get ( GrB_Desc_Value *val, GrB_Descriptor desc, GrB_Desc_Field field );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_fprint","text":"GxB_IndexUnaryOp_fprint(op, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_IndexUnaryOp_fprint ( GrB_IndexUnaryOp op, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_new-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_new","text":"GxB_IndexUnaryOp_new(op, _function, ztype, xtype, ytype, idxop_name, idxop_defn)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_IndexUnaryOp_new ( GrB_IndexUnaryOp *op, GxB_index_unary_function function, GrB_Type ztype, GrB_Type xtype, GrB_Type ytype, const char *idxop_name, const char *idxop_defn );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_xtype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_xtype_name","text":"GxB_IndexUnaryOp_xtype_name(type_name, op)\n\nFor TRIL, TRIU, DIAG, OFFDIAG, COLLE, COLGT, ROWLE, and ROWGT, the xtype_name is an empty string (\"\"), since these functions do not depend on the type of the matrix input.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_IndexUnaryOp_xtype_name ( char *type_name, const GrB_IndexUnaryOp op );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_ytype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_ytype_name","text":"GxB_IndexUnaryOp_ytype_name(type_name, op)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_IndexUnaryOp_ytype_name ( char *type_name, const GrB_IndexUnaryOp op );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_ztype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_IndexUnaryOp_ztype_name","text":"GxB_IndexUnaryOp_ztype_name(type_name, op)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_IndexUnaryOp_ztype_name ( char *type_name, const GrB_IndexUnaryOp op );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Iterator_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Iterator_free","text":"GxB_Iterator_free(iterator)\n\nGxBIteratorfree: free an iterator\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Iterator_free (GxB_Iterator *iterator);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Iterator_new-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Iterator_new","text":"GxB_Iterator_new(iterator)\n\nGxBIteratornew: create a new iterator, not attached to any matrix/vector\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Iterator_new (GxB_Iterator *iterator);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_attach-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_attach","text":"GxB_Matrix_Iterator_attach(iterator, A, desc)\n\nIf successful, the entry iterator is attached to the matrix, but not to any specific entry.  Use GxBMatrixIterator_seek to move the iterator to a particular entry.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_Iterator_attach ( GxB_Iterator iterator, GrB_Matrix A, GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_getIndex-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_getIndex","text":"GxB_Matrix_Iterator_getIndex(iterator, row, col)\n\nOn input, the entry iterator must be already attached to a matrix via GxBMatrixIteratorattach, and the position of the iterator must also have been defined by a prior call to GxBMatrixIteratorseek or GxBMatrixIteratornext, with a return value of GrBSUCCESS.  Results are undefined if these conditions are not met.\n\nPrototype\n\nGB_PUBLIC void GxB_Matrix_Iterator_getIndex ( GxB_Iterator iterator, GrB_Index *row, GrB_Index *col );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_getp-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_getp","text":"GxB_Matrix_Iterator_getp(iterator)\n\nOn input, the entry iterator must be already attached to a matrix via GxBMatrixIteratorattach, and the position of the iterator must also have been defined by a prior call to GxBMatrixIteratorseek or GxBMatrixIterator_next.  Results are undefined if these conditions are not met.\n\nPrototype\n\nGB_PUBLIC GrB_Index GxB_Matrix_Iterator_getp (GxB_Iterator iterator);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_getpmax-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_getpmax","text":"GxB_Matrix_Iterator_getpmax(iterator)\n\nEntries in a matrix are given an index p, ranging from 0 to pmax-1, where pmax >= nvals(A).  For sparse, hypersparse, and full matrices, pmax is equal to nvals(A).  For an m-by-n bitmap matrix, pmax=m*n, or pmax=0 if the matrix has no entries.\n\nPrototype\n\nGB_PUBLIC GrB_Index GxB_Matrix_Iterator_getpmax (GxB_Iterator iterator);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_next-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_next","text":"GxB_Matrix_Iterator_next(iterator)\n\nReturns GrBSUCCESS if the iterator is at an entry that exists in the matrix, or GxBEXHAUSTED if the iterator is exhausted.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_Iterator_next (GxB_Iterator iterator);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_seek-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_Iterator_seek","text":"GxB_Matrix_Iterator_seek(iterator, p)\n\nReturns GrBSUCCESS if the iterator is at an entry that exists in the matrix, or GxBEXHAUSTED if the iterator is exhausted.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_Iterator_seek (GxB_Iterator iterator, GrB_Index p);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp1st-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp1st","text":"GxB_Matrix_apply_BinaryOp1st(C, Mask, accum, op, x, A, desc)\n\nhistorical: identical to GrBMatrixapplyBinaryOp1stScalar\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_BinaryOp1st ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Scalar x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp1st_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp1st_FC32","text":"GxB_Matrix_apply_BinaryOp1st_FC32(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_BinaryOp1st_FC32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, GxB_FC32_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp1st_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp1st_FC64","text":"GxB_Matrix_apply_BinaryOp1st_FC64(C, Mask, accum, op, x, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_BinaryOp1st_FC64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, GxB_FC64_t x, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp2nd-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp2nd","text":"GxB_Matrix_apply_BinaryOp2nd(C, Mask, accum, op, A, y, desc)\n\nhistorical: identical to GrBMatrixapplyBinaryOp2ndScalar\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_BinaryOp2nd ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp2nd_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp2nd_FC32","text":"GxB_Matrix_apply_BinaryOp2nd_FC32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_BinaryOp2nd_FC32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, GxB_FC32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp2nd_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_BinaryOp2nd_FC64","text":"GxB_Matrix_apply_BinaryOp2nd_FC64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_BinaryOp2nd_FC64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, GxB_FC64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_IndexOp_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_IndexOp_FC32","text":"GxB_Matrix_apply_IndexOp_FC32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_IndexOp_FC32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, GxB_FC32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_IndexOp_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_apply_IndexOp_FC64","text":"GxB_Matrix_apply_IndexOp_FC64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_apply_IndexOp_FC64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, GxB_FC64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_assign_FC32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_assign_FC32","text":"GxB_Matrix_assign_FC32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_assign_FC32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, GxB_FC32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_assign_FC64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_assign_FC64","text":"GxB_Matrix_assign_FC64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_assign_FC64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, GxB_FC64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_build_FC32-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_build_FC32","text":"GxB_Matrix_build_FC32(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_build_FC32 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const GxB_FC32_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_build_FC64-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_build_FC64","text":"GxB_Matrix_build_FC64(C, I, J, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_build_FC64 ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, const GxB_FC64_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_build_Scalar-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_build_Scalar","text":"GxB_Matrix_build_Scalar(C, I, J, scalar, nvals)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_build_Scalar ( GrB_Matrix C, const GrB_Index *I, const GrB_Index *J, GrB_Scalar scalar, GrB_Index nvals );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_concat-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_concat","text":"GxB_Matrix_concat(C, Tiles, m, n, desc)\n\nThe type of C is unchanged, and all matrices A{i,j} are typecasted into the type of C.  Any settings made to C by GxBMatrixOption_set (format by row or by column, bitmap switch, hyper switch, and sparsity control) are unchanged.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_concat ( GrB_Matrix C, const GrB_Matrix *Tiles, const GrB_Index m, const GrB_Index n, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_deserialize-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_deserialize","text":"GxB_Matrix_deserialize(C, type, blob, blob_size, desc)\n\nThe GrB* and GxB* deserialize methods are nearly identical.  The GxB* deserialize methods simply add the descriptor, which allows for optional control of the # of threads used to deserialize the blob.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_deserialize ( GrB_Matrix *C, GrB_Type type, const void *blob, GrB_Index blob_size, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_diag-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_diag","text":"GxB_Matrix_diag(C, v, k, desc)\n\nGrBMatrixdiag is like GxBMatrixdiag (&C, v, k, NULL), except that C must already exist on input, of the correct size.  Any existing entries in C are discarded.  The type of C is preserved, so that if the type of C and v differ, the entries are typecasted into the type of C.  Any settings made to C by GxBMatrixOption_set (format by row or by column, bitmap switch, hyper switch, and sparsity control) are unchanged.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_diag ( GrB_Matrix C, const GrB_Vector v, int64_t k, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_eWiseUnion-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_eWiseUnion","text":"GxB_Matrix_eWiseUnion(C, Mask, accum, add, A, alpha, B, beta, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_eWiseUnion ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp add, const GrB_Matrix A, const GrB_Scalar alpha, const GrB_Matrix B, const GrB_Scalar beta, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_BitmapC-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_BitmapC","text":"GxB_Matrix_export_BitmapC(A, type, nrows, ncols, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_BitmapC ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, int8_t **Ab, void **Ax, GrB_Index *Ab_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_BitmapR-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_BitmapR","text":"GxB_Matrix_export_BitmapR(A, type, nrows, ncols, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_BitmapR ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, int8_t **Ab, void **Ax, GrB_Index *Ab_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_CSC-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_CSC","text":"GxB_Matrix_export_CSC(A, type, nrows, ncols, Ap, Ai, Ax, Ap_size, Ai_size, Ax_size, iso, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_CSC ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, GrB_Index **Ap, GrB_Index **Ai, void **Ax, GrB_Index *Ap_size, GrB_Index *Ai_size, GrB_Index *Ax_size, bool *iso, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_CSR-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_CSR","text":"GxB_Matrix_export_CSR(A, type, nrows, ncols, Ap, Aj, Ax, Ap_size, Aj_size, Ax_size, iso, jumbled, desc)\n\nThe GxB*export/unpack functions are symmetric with the GxB*import/pack functions.  The export/unpack functions force completion of any pending operations, prior to the export, except if the only pending operation is to unjumble the matrix.\n\nIf there are no entries in the matrix or vector, then the index arrays (Ai, Aj, or vi) and value arrays (Ax or vx) are returned as NULL.  This is not an error condition.\n\nA GrBMatrix may be exported/unpacked in any one of four different formats. On successful export, the input GrBMatrix A is freed, and the output arrays Ah, Ap, Ai, Aj, and/or Ax are returned to the user application as arrays allocated by the ANSI C malloc function.  The four formats are the same as the import formats for GxBMatriximport/pack.\n\nIf jumbled is NULL on input, this indicates to GxB_export/unpack that the exported/unpacked matrix cannot be returned in a jumbled format.  In this case, if the matrix is jumbled, it is sorted before exporting it to the caller.\n\nIf iso is NULL on input, this indicates to the export/unpack methods that the exported/unpacked matrix cannot be returned in a iso format, with an Ax array with just one entry.  In this case, if the matrix is iso, it is expanded before exporting/unpacking it to the caller.\n\nFor the export/unpackFull methods, all entries in the matrix or must be present.  That is, GrB*nvals must report nvals equal to nrows*ncols or a matrix.  If this condition does not hold, the matrix/vector is not exported, and GrBINVALIDVALUE is returned.\n\nIf the export/unpack is not successful, the export/unpack functions do not modify matrix or vector and the user arrays are returned as NULL.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_CSR ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, GrB_Index **Ap, GrB_Index **Aj, void **Ax, GrB_Index *Ap_size, GrB_Index *Aj_size, GrB_Index *Ax_size, bool *iso, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FC32-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FC32","text":"GxB_Matrix_export_FC32(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_FC32 ( GrB_Index *Ap, GrB_Index *Ai, GxB_FC32_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FC64-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FC64","text":"GxB_Matrix_export_FC64(Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_FC64 ( GrB_Index *Ap, GrB_Index *Ai, GxB_FC64_t *Ax, GrB_Index *Ap_len, GrB_Index *Ai_len, GrB_Index *Ax_len, GrB_Format format, GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FullC-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FullC","text":"GxB_Matrix_export_FullC(A, type, nrows, ncols, Ax, Ax_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_FullC ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, void **Ax, GrB_Index *Ax_size, bool *iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FullR-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_FullR","text":"GxB_Matrix_export_FullR(A, type, nrows, ncols, Ax, Ax_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_FullR ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, void **Ax, GrB_Index *Ax_size, bool *iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_HyperCSC-NTuple{16, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_HyperCSC","text":"GxB_Matrix_export_HyperCSC(A, type, nrows, ncols, Ap, Ah, Ai, Ax, Ap_size, Ah_size, Ai_size, Ax_size, iso, nvec, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_HyperCSC ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Ai, void **Ax, GrB_Index *Ap_size, GrB_Index *Ah_size, GrB_Index *Ai_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvec, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_HyperCSR-NTuple{16, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_export_HyperCSR","text":"GxB_Matrix_export_HyperCSR(A, type, nrows, ncols, Ap, Ah, Aj, Ax, Ap_size, Ah_size, Aj_size, Ax_size, iso, nvec, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_export_HyperCSR ( GrB_Matrix *A, GrB_Type *type, GrB_Index *nrows, GrB_Index *ncols, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Aj, void **Ax, GrB_Index *Ap_size, GrB_Index *Ah_size, GrB_Index *Aj_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvec, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractElement_FC32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractElement_FC32","text":"GxB_Matrix_extractElement_FC32(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_extractElement_FC32 ( GxB_FC32_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractElement_FC64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractElement_FC64","text":"GxB_Matrix_extractElement_FC64(x, A, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_extractElement_FC64 ( GxB_FC64_t *x, const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractTuples_FC32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractTuples_FC32","text":"GxB_Matrix_extractTuples_FC32(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_extractTuples_FC32 ( GrB_Index *I, GrB_Index *J, GxB_FC32_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractTuples_FC64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_extractTuples_FC64","text":"GxB_Matrix_extractTuples_FC64(I, J, X, nvals, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_extractTuples_FC64 ( GrB_Index *I, GrB_Index *J, GxB_FC64_t *X, GrB_Index *nvals, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_fprint","text":"GxB_Matrix_fprint(A, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_fprint ( GrB_Matrix A, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_BitmapC-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_BitmapC","text":"GxB_Matrix_import_BitmapC(A, type, nrows, ncols, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\n\n\nGxBMatrixpack_BitmapC: pack a bitmap matrix, held by column\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_BitmapC ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, int8_t **Ab, void **Ax, GrB_Index Ab_size, GrB_Index Ax_size, bool iso, GrB_Index nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_BitmapR-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_BitmapR","text":"GxB_Matrix_import_BitmapR(A, type, nrows, ncols, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\n\n\nGxBMatrixpack_BitmapR: pack a bitmap matrix, held by row\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_BitmapR ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, int8_t **Ab, void **Ax, GrB_Index Ab_size, GrB_Index Ax_size, bool iso, GrB_Index nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_CSC-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_CSC","text":"GxB_Matrix_import_CSC(A, type, nrows, ncols, Ap, Ai, Ax, Ap_size, Ai_size, Ax_size, iso, jumbled, desc)\n\n\n\nGxBMatrixpack_CSC: pack a CSC matrix\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_CSC ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, GrB_Index **Ap, GrB_Index **Ai, void **Ax, GrB_Index Ap_size, GrB_Index Ai_size, GrB_Index Ax_size, bool iso, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_CSR-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_CSR","text":"GxB_Matrix_import_CSR(A, type, nrows, ncols, Ap, Aj, Ax, Ap_size, Aj_size, Ax_size, iso, jumbled, desc)\n\n\n\nGxBMatrixpack_CSR: pack a CSR matrix\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_CSR ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, GrB_Index **Ap, GrB_Index **Aj, void **Ax, GrB_Index Ap_size, GrB_Index Aj_size, GrB_Index Ax_size, bool iso, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FC32-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FC32","text":"GxB_Matrix_import_FC32(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_FC32 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const GxB_FC32_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FC64-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FC64","text":"GxB_Matrix_import_FC64(A, type, nrows, ncols, Ap, Ai, Ax, Ap_len, Ai_len, Ax_len, format)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_FC64 ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, const GrB_Index *Ap, const GrB_Index *Ai, const GxB_FC64_t *Ax, GrB_Index Ap_len, GrB_Index Ai_len, GrB_Index Ax_len, GrB_Format format );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FullC-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FullC","text":"GxB_Matrix_import_FullC(A, type, nrows, ncols, Ax, Ax_size, iso, desc)\n\n\n\nGxBMatrixpack_FullC: pack a full matrix, held by column\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_FullC ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, void **Ax, GrB_Index Ax_size, bool iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FullR-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_FullR","text":"GxB_Matrix_import_FullR(A, type, nrows, ncols, Ax, Ax_size, iso, desc)\n\n\n\nGxBMatrixpack_FullR:  pack a full matrix, held by row\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_FullR ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, void **Ax, GrB_Index Ax_size, bool iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_HyperCSC-NTuple{16, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_HyperCSC","text":"GxB_Matrix_import_HyperCSC(A, type, nrows, ncols, Ap, Ah, Ai, Ax, Ap_size, Ah_size, Ai_size, Ax_size, iso, nvec, jumbled, desc)\n\n\n\nGxBMatrixpack_HyperCSC: pack a hypersparse CSC matrix\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_HyperCSC ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Ai, void **Ax, GrB_Index Ap_size, GrB_Index Ah_size, GrB_Index Ai_size, GrB_Index Ax_size, bool iso, GrB_Index nvec, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_HyperCSR-NTuple{16, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_import_HyperCSR","text":"GxB_Matrix_import_HyperCSR(A, type, nrows, ncols, Ap, Ah, Aj, Ax, Ap_size, Ah_size, Aj_size, Ax_size, iso, nvec, jumbled, desc)\n\n\n\nGxBMatrixpack_HyperCSR: pack a hypersparse CSR matrix\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_import_HyperCSR ( GrB_Matrix *A, GrB_Type type, GrB_Index nrows, GrB_Index ncols, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Aj, void **Ax, GrB_Index Ap_size, GrB_Index Ah_size, GrB_Index Aj_size, GrB_Index Ax_size, bool iso, GrB_Index nvec, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_isStoredElement-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_isStoredElement","text":"GxB_Matrix_isStoredElement(A, i, j)\n\nGxBMatrixisStoredElement determines if A(i,j) is present in the structure of the matrix A, as a stored element.  It does not return the value.  It returns GrBSUCCESS if the element is present, or GrBNO_VALUE otherwise.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_isStoredElement ( const GrB_Matrix A, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_iso-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_iso","text":"GxB_Matrix_iso(iso, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_iso ( bool *iso, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_memoryUsage-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_memoryUsage","text":"GxB_Matrix_memoryUsage(size, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_memoryUsage ( size_t *size, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_BitmapC-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_BitmapC","text":"GxB_Matrix_pack_BitmapC(A, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_BitmapC ( GrB_Matrix A, int8_t **Ab, void **Ax, GrB_Index Ab_size, GrB_Index Ax_size, bool iso, GrB_Index nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_BitmapR-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_BitmapR","text":"GxB_Matrix_pack_BitmapR(A, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_BitmapR ( GrB_Matrix A, int8_t **Ab, void **Ax, GrB_Index Ab_size, GrB_Index Ax_size, bool iso, GrB_Index nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_CSC-NTuple{10, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_CSC","text":"GxB_Matrix_pack_CSC(A, Ap, Ai, Ax, Ap_size, Ai_size, Ax_size, iso, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_CSC ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Ai, void **Ax, GrB_Index Ap_size, GrB_Index Ai_size, GrB_Index Ax_size, bool iso, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_CSR-NTuple{10, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_CSR","text":"GxB_Matrix_pack_CSR(A, Ap, Aj, Ax, Ap_size, Aj_size, Ax_size, iso, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_CSR ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Aj, void **Ax, GrB_Index Ap_size, GrB_Index Aj_size, GrB_Index Ax_size, bool iso, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_FullC-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_FullC","text":"GxB_Matrix_pack_FullC(A, Ax, Ax_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_FullC ( GrB_Matrix A, void **Ax, GrB_Index Ax_size, bool iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_FullR-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_FullR","text":"GxB_Matrix_pack_FullR(A, Ax, Ax_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_FullR ( GrB_Matrix A, void **Ax, GrB_Index Ax_size, bool iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_HyperCSC-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_HyperCSC","text":"GxB_Matrix_pack_HyperCSC(A, Ap, Ah, Ai, Ax, Ap_size, Ah_size, Ai_size, Ax_size, iso, nvec, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_HyperCSC ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Ai, void **Ax, GrB_Index Ap_size, GrB_Index Ah_size, GrB_Index Ai_size, GrB_Index Ax_size, bool iso, GrB_Index nvec, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_HyperCSR-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_pack_HyperCSR","text":"GxB_Matrix_pack_HyperCSR(A, Ap, Ah, Aj, Ax, Ap_size, Ah_size, Aj_size, Ax_size, iso, nvec, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_pack_HyperCSR ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Aj, void **Ax, GrB_Index Ap_size, GrB_Index Ah_size, GrB_Index Aj_size, GrB_Index Ax_size, bool iso, GrB_Index nvec, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reduce_FC32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reduce_FC32","text":"GxB_Matrix_reduce_FC32(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_reduce_FC32 ( GxB_FC32_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reduce_FC64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reduce_FC64","text":"GxB_Matrix_reduce_FC64(c, accum, monoid, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_reduce_FC64 ( GxB_FC64_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reshape-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reshape","text":"GxB_Matrix_reshape(C, by_col, nrows_new, ncols_new, desc)\n\nIf the input matrix is nrows-by-ncols, and the size of the reshaped matrix is nrowsnew-by-ncolsnew, then nrowsncols must equal nrows_newncolsnew. The format of the input matrix (by row or by column) is unchanged; this format need not match the bycol input parameter.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_reshape ( GrB_Matrix C, bool by_col, GrB_Index nrows_new, GrB_Index ncols_new, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reshapeDup-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_reshapeDup","text":"GxB_Matrix_reshapeDup(C, A, by_col, nrows_new, ncols_new, desc)\n\nIf the input matrix A is nrows-by-ncols, and the size of the newly-created matrix C is nrowsnew-by-ncolsnew, then nrowsncols must equal nrows_newncolsnew.  The format of the input matrix A (by row or by column) determines the format of the output matrix C, which need not match the bycol input parameter.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_reshapeDup ( GrB_Matrix *C, GrB_Matrix A, bool by_col, GrB_Index nrows_new, GrB_Index ncols_new, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_resize-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_resize","text":"GxB_Matrix_resize(C, nrows_new, ncols_new)\n\nGxB*resize are identical to the GrB_*resize methods above\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_resize ( GrB_Matrix C, GrB_Index nrows_new, GrB_Index ncols_new );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_select-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_select","text":"GxB_Matrix_select(C, Mask, accum, op, A, Thunk, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_select ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GxB_SelectOp op, const GrB_Matrix A, const GrB_Scalar Thunk, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_select_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_select_FC32","text":"GxB_Matrix_select_FC32(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_select_FC32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, GxB_FC32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_select_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_select_FC64","text":"GxB_Matrix_select_FC64(C, Mask, accum, op, A, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_select_FC64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Matrix A, GxB_FC64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_serialize-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_serialize","text":"GxB_Matrix_serialize(blob_handle, blob_size_handle, A, desc)\n\nIf the level setting is out of range, the default is used for that method. If the method is negative, no compression is performed.  If the method is positive but unrecognized, the default is used (GxBCOMPRESSIONZSTD, level 1).\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_serialize ( void **blob_handle, GrB_Index *blob_size_handle, GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_setElement_FC32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_setElement_FC32","text":"GxB_Matrix_setElement_FC32(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_setElement_FC32 ( GrB_Matrix C, GxB_FC32_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_setElement_FC64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_setElement_FC64","text":"GxB_Matrix_setElement_FC64(C, x, i, j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_setElement_FC64 ( GrB_Matrix C, GxB_FC64_t x, GrB_Index i, GrB_Index j );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_sort-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_sort","text":"GxB_Matrix_sort(C, P, op, A, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_sort ( GrB_Matrix C, GrB_Matrix P, GrB_BinaryOp op, GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_split-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_split","text":"GxB_Matrix_split(Tiles, m, n, Tile_nrows, Tile_ncols, A, desc)\n\nGxBMatrixsplit does the opposite of GxBMatrixconcat.  It splits a single input matrix A into a 2D array of tiles.  On input, the Tiles array must be a non-NULL pointer to a previously allocated array of size at least m*n where both m and n must be > 0.  The Tilesnrows array has size m, and Tilesncols has size n.  The (i,j)th tile has dimension Tilesnrows[i]-by-Tilesncols[j].  The sum of Tilesnrows [0:m-1] must equal the number of rows of A, and the sum of Tilesncols [0:n-1] must equal the number of columns of A.  The type of each tile is the same as the type of A; no typecasting is done.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_split ( GrB_Matrix *Tiles, const GrB_Index m, const GrB_Index n, const GrB_Index *Tile_nrows, const GrB_Index *Tile_ncols, const GrB_Matrix A, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign","text":"GxB_Matrix_subassign(C, Mask, accum, A, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_Matrix A, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_BOOL-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_BOOL","text":"GxB_Matrix_subassign_BOOL(C, Mask, accum, x, I, ni, J, nj, desc)\n\nAssigns a single scalar to a submatrix, C(I,J)<Mask> = accum(C(I,J),x).  The scalar x is implicitly expanded into a matrix A of size ni-by-nj, with each entry in A equal to x, and then C(I,J)<Mask> = accum(C(I,J),A) is done.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_BOOL ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, bool x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FC32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FC32","text":"GxB_Matrix_subassign_FC32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_FC32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, GxB_FC32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FC64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FC64","text":"GxB_Matrix_subassign_FC64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_FC64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, GxB_FC64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FP32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FP32","text":"GxB_Matrix_subassign_FP32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_FP32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, float x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FP64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_FP64","text":"GxB_Matrix_subassign_FP64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_FP64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, double x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT16-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT16","text":"GxB_Matrix_subassign_INT16(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_INT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT32","text":"GxB_Matrix_subassign_INT32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_INT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT64","text":"GxB_Matrix_subassign_INT64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_INT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT8-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_INT8","text":"GxB_Matrix_subassign_INT8(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_INT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, int8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_Scalar-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_Scalar","text":"GxB_Matrix_subassign_Scalar(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_Scalar ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, GrB_Scalar x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UDT-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UDT","text":"GxB_Matrix_subassign_UDT(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_UDT ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, void *x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT16-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT16","text":"GxB_Matrix_subassign_UINT16(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_UINT16 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT32-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT32","text":"GxB_Matrix_subassign_UINT32(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_UINT32 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT64-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT64","text":"GxB_Matrix_subassign_UINT64(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_UINT64 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT8-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_subassign_UINT8","text":"GxB_Matrix_subassign_UINT8(C, Mask, accum, x, I, ni, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_subassign_UINT8 ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, uint8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_type-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_type","text":"GxB_Matrix_type(type, A)\n\nNOTE: GxBMatrixtype is historical.  Use GxBMatrixtype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_type ( GrB_Type *type, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_type_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_type_name","text":"GxB_Matrix_type_name(type_name, A)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_type_name ( char *type_name, const GrB_Matrix A );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_BitmapC-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_BitmapC","text":"GxB_Matrix_unpack_BitmapC(A, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_BitmapC ( GrB_Matrix A, int8_t **Ab, void **Ax, GrB_Index *Ab_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_BitmapR-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_BitmapR","text":"GxB_Matrix_unpack_BitmapR(A, Ab, Ax, Ab_size, Ax_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_BitmapR ( GrB_Matrix A, int8_t **Ab, void **Ax, GrB_Index *Ab_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_CSC-NTuple{10, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_CSC","text":"GxB_Matrix_unpack_CSC(A, Ap, Ai, Ax, Ap_size, Ai_size, Ax_size, iso, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_CSC ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Ai, void **Ax, GrB_Index *Ap_size, GrB_Index *Ai_size, GrB_Index *Ax_size, bool *iso, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_CSR-NTuple{10, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_CSR","text":"GxB_Matrix_unpack_CSR(A, Ap, Aj, Ax, Ap_size, Aj_size, Ax_size, iso, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_CSR ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Aj, void **Ax, GrB_Index *Ap_size, GrB_Index *Aj_size, GrB_Index *Ax_size, bool *iso, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_FullC-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_FullC","text":"GxB_Matrix_unpack_FullC(A, Ax, Ax_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_FullC ( GrB_Matrix A, void **Ax, GrB_Index *Ax_size, bool *iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_FullR-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_FullR","text":"GxB_Matrix_unpack_FullR(A, Ax, Ax_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_FullR ( GrB_Matrix A, void **Ax, GrB_Index *Ax_size, bool *iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_HyperCSC-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_HyperCSC","text":"GxB_Matrix_unpack_HyperCSC(A, Ap, Ah, Ai, Ax, Ap_size, Ah_size, Ai_size, Ax_size, iso, nvec, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_HyperCSC ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Ai, void **Ax, GrB_Index *Ap_size, GrB_Index *Ah_size, GrB_Index *Ai_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvec, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_HyperCSR-NTuple{13, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Matrix_unpack_HyperCSR","text":"GxB_Matrix_unpack_HyperCSR(A, Ap, Ah, Aj, Ax, Ap_size, Ah_size, Aj_size, Ax_size, iso, nvec, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Matrix_unpack_HyperCSR ( GrB_Matrix A, GrB_Index **Ap, GrB_Index **Ah, GrB_Index **Aj, void **Ax, GrB_Index *Ap_size, GrB_Index *Ah_size, GrB_Index *Aj_size, GrB_Index *Ax_size, bool *iso, GrB_Index *nvec, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_fprint","text":"GxB_Monoid_fprint(monoid, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_fprint ( GrB_Monoid monoid, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_identity-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_identity","text":"GxB_Monoid_identity(identity, monoid)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_identity ( void *identity, GrB_Monoid monoid );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_new_FC32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_new_FC32","text":"GxB_Monoid_new_FC32(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_new_FC32 ( GrB_Monoid *monoid, GrB_BinaryOp op, GxB_FC32_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_new_FC64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_new_FC64","text":"GxB_Monoid_new_FC64(monoid, op, identity)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_new_FC64 ( GrB_Monoid *monoid, GrB_BinaryOp op, GxB_FC64_t identity );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_operator-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_operator","text":"GxB_Monoid_operator(op, monoid)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_operator ( GrB_BinaryOp *op, GrB_Monoid monoid );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal","text":"GxB_Monoid_terminal(has_terminal, terminal, monoid)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal ( bool *has_terminal, void *terminal, GrB_Monoid monoid );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_BOOL-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_BOOL","text":"GxB_Monoid_terminal_new_BOOL(monoid, op, identity, terminal)\n\nGxBMonoidterminalnew is identical to GrBMonoidnew, except that a terminal value can be specified.  The terminal may be NULL, which indicates no terminal value (and in this case, it is identical to GrBMonoid_new). The terminal value, if not NULL, must have the same type as the identity.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_BOOL ( GrB_Monoid *monoid, GrB_BinaryOp op, bool identity, bool terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FC32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FC32","text":"GxB_Monoid_terminal_new_FC32(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_FC32 ( GrB_Monoid *monoid, GrB_BinaryOp op, GxB_FC32_t identity, GxB_FC32_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FC64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FC64","text":"GxB_Monoid_terminal_new_FC64(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_FC64 ( GrB_Monoid *monoid, GrB_BinaryOp op, GxB_FC64_t identity, GxB_FC64_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FP32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FP32","text":"GxB_Monoid_terminal_new_FP32(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_FP32 ( GrB_Monoid *monoid, GrB_BinaryOp op, float identity, float terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FP64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_FP64","text":"GxB_Monoid_terminal_new_FP64(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_FP64 ( GrB_Monoid *monoid, GrB_BinaryOp op, double identity, double terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT16","text":"GxB_Monoid_terminal_new_INT16(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_INT16 ( GrB_Monoid *monoid, GrB_BinaryOp op, int16_t identity, int16_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT32","text":"GxB_Monoid_terminal_new_INT32(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_INT32 ( GrB_Monoid *monoid, GrB_BinaryOp op, int32_t identity, int32_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT64","text":"GxB_Monoid_terminal_new_INT64(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_INT64 ( GrB_Monoid *monoid, GrB_BinaryOp op, int64_t identity, int64_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_INT8","text":"GxB_Monoid_terminal_new_INT8(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_INT8 ( GrB_Monoid *monoid, GrB_BinaryOp op, int8_t identity, int8_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UDT-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UDT","text":"GxB_Monoid_terminal_new_UDT(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_UDT ( GrB_Monoid *monoid, GrB_BinaryOp op, void *identity, void *terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT16-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT16","text":"GxB_Monoid_terminal_new_UINT16(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_UINT16 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint16_t identity, uint16_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT32","text":"GxB_Monoid_terminal_new_UINT32(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_UINT32 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint32_t identity, uint32_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT64","text":"GxB_Monoid_terminal_new_UINT64(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_UINT64 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint64_t identity, uint64_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT8-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Monoid_terminal_new_UINT8","text":"GxB_Monoid_terminal_new_UINT8(monoid, op, identity, terminal)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Monoid_terminal_new_UINT8 ( GrB_Monoid *monoid, GrB_BinaryOp op, uint8_t identity, uint8_t terminal );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Row_subassign-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Row_subassign","text":"GxB_Row_subassign(C, mask, accum, u, i, J, nj, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Row_subassign ( GrB_Matrix C, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Vector u, GrB_Index i, const GrB_Index *J, GrB_Index nj, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_clear-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_clear","text":"GxB_Scalar_clear(s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_clear (GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_dup-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_dup","text":"GxB_Scalar_dup(s, t)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_dup (GrB_Scalar *s, const GrB_Scalar t);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_error","text":"GxB_Scalar_error(error, s)\n\nGxBScalarerror is historical: use GrBScalarerror instead\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_error (const char **error, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_BOOL-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_BOOL","text":"GxB_Scalar_extractElement_BOOL(x, s)\n\nhistorical names identical to GrBScalarmethods above:\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_BOOL (bool *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FC32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FC32","text":"GxB_Scalar_extractElement_FC32(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_FC32 ( GxB_FC32_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FC64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FC64","text":"GxB_Scalar_extractElement_FC64(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_FC64 ( GxB_FC64_t *x, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FP32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FP32","text":"GxB_Scalar_extractElement_FP32(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_FP32 (float *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FP64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_FP64","text":"GxB_Scalar_extractElement_FP64(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_FP64 (double *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT16","text":"GxB_Scalar_extractElement_INT16(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_INT16 (int16_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT32","text":"GxB_Scalar_extractElement_INT32(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_INT32 (int32_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT64","text":"GxB_Scalar_extractElement_INT64(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_INT64 (int64_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_INT8","text":"GxB_Scalar_extractElement_INT8(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_INT8 (int8_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UDT-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UDT","text":"GxB_Scalar_extractElement_UDT(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_UDT (void *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT16","text":"GxB_Scalar_extractElement_UINT16(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_UINT16 (uint16_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT32","text":"GxB_Scalar_extractElement_UINT32(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_UINT32 (uint32_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT64","text":"GxB_Scalar_extractElement_UINT64(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_UINT64 (uint64_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_extractElement_UINT8","text":"GxB_Scalar_extractElement_UINT8(x, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_extractElement_UINT8 (uint8_t *x, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_fprint","text":"GxB_Scalar_fprint(s, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_fprint ( GrB_Scalar s, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_free","text":"GxB_Scalar_free(s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_free (GrB_Scalar *s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_memoryUsage-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_memoryUsage","text":"GxB_Scalar_memoryUsage(size, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_memoryUsage ( size_t *size, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_new-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_new","text":"GxB_Scalar_new(s, type)\n\nhistorical names identical to GrBScalarmethods above:\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_new (GrB_Scalar *s, GrB_Type type);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_nvals-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_nvals","text":"GxB_Scalar_nvals(nvals, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_nvals (GrB_Index *nvals, const GrB_Scalar s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_BOOL-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_BOOL","text":"GxB_Scalar_setElement_BOOL(s, x)\n\nhistorical names identical to GrBScalarmethods above:\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_BOOL (GrB_Scalar s, bool x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FC32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FC32","text":"GxB_Scalar_setElement_FC32(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_FC32 ( GrB_Scalar s, GxB_FC32_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FC64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FC64","text":"GxB_Scalar_setElement_FC64(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_FC64 ( GrB_Scalar s, GxB_FC64_t x );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FP32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FP32","text":"GxB_Scalar_setElement_FP32(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_FP32 (GrB_Scalar s, float x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FP64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_FP64","text":"GxB_Scalar_setElement_FP64(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_FP64 (GrB_Scalar s, double x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT16","text":"GxB_Scalar_setElement_INT16(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_INT16 (GrB_Scalar s, int16_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT32","text":"GxB_Scalar_setElement_INT32(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_INT32 (GrB_Scalar s, int32_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT64","text":"GxB_Scalar_setElement_INT64(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_INT64 (GrB_Scalar s, int64_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_INT8","text":"GxB_Scalar_setElement_INT8(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_INT8 (GrB_Scalar s, int8_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UDT-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UDT","text":"GxB_Scalar_setElement_UDT(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_UDT (GrB_Scalar s, void *x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT16-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT16","text":"GxB_Scalar_setElement_UINT16(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_UINT16 (GrB_Scalar s, uint16_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT32-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT32","text":"GxB_Scalar_setElement_UINT32(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_UINT32 (GrB_Scalar s, uint32_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT64-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT64","text":"GxB_Scalar_setElement_UINT64(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_UINT64 (GrB_Scalar s, uint64_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT8-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_setElement_UINT8","text":"GxB_Scalar_setElement_UINT8(s, x)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_setElement_UINT8 (GrB_Scalar s, uint8_t x);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_type-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_type","text":"GxB_Scalar_type(type, s)\n\nNOTE: GxBScalartype is historical.  Use GxBScalartype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_type ( GrB_Type *type, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_type_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_type_name","text":"GxB_Scalar_type_name(type_name, s)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_type_name ( char *type_name, const GrB_Scalar s );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_wait-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Scalar_wait","text":"GxB_Scalar_wait(s)\n\nNOTE: GxBScalarwait is historical; use GrBScalarwait instead\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Scalar_wait (GrB_Scalar *s);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_error-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_error","text":"GxB_SelectOp_error(error, op)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_SelectOp_error (const char **error, const GxB_SelectOp op);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_fprint","text":"GxB_SelectOp_fprint(selectop, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_SelectOp_fprint ( GxB_SelectOp selectop, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_free","text":"GxB_SelectOp_free(selectop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_SelectOp_free ( GxB_SelectOp *selectop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_ttype-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_ttype","text":"GxB_SelectOp_ttype(ttype, selectop)\n\nGxBSelectOpttype is historical.  Use a GrB_IndexUnaryOp instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_SelectOp_ttype ( GrB_Type *ttype, GxB_SelectOp selectop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_wait-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_wait","text":"GxB_SelectOp_wait(op, waitmode)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_SelectOp_wait (GxB_SelectOp op , GrB_WaitMode waitmode);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_xtype-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_SelectOp_xtype","text":"GxB_SelectOp_xtype(xtype, selectop)\n\nGxBSelectOpxtype is historical.  Use a GrB_IndexUnaryOp instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_SelectOp_xtype ( GrB_Type *xtype, GxB_SelectOp selectop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Semiring_add-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Semiring_add","text":"GxB_Semiring_add(add, semiring)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Semiring_add ( GrB_Monoid *add, GrB_Semiring semiring );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Semiring_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Semiring_fprint","text":"GxB_Semiring_fprint(semiring, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Semiring_fprint ( GrB_Semiring semiring, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Semiring_multiply-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Semiring_multiply","text":"GxB_Semiring_multiply(multiply, semiring)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Semiring_multiply ( GrB_BinaryOp *multiply, GrB_Semiring semiring );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_fprint","text":"GxB_Type_fprint(type, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Type_fprint ( GrB_Type type, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_from_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_from_name","text":"GxB_Type_from_name(type, type_name)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Type_from_name ( GrB_Type *type, const char *type_name );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_name","text":"GxB_Type_name(type_name, type)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Type_name ( char *type_name, const GrB_Type type );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_new-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_new","text":"GxB_Type_new(type, sizeof_ctype, type_name, type_defn)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Type_new ( GrB_Type *type, size_t sizeof_ctype, const char *type_name, const char *type_defn );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_size-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Type_size","text":"GxB_Type_size(size, type)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Type_size ( size_t *size, const GrB_Type type );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_fprint","text":"GxB_UnaryOp_fprint(unaryop, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_UnaryOp_fprint ( GrB_UnaryOp unaryop, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_new-NTuple{6, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_new","text":"GxB_UnaryOp_new(unaryop, _function, ztype, xtype, unop_name, unop_defn)\n\nGxBUnaryOpnew creates a named user-defined unary op.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_UnaryOp_new ( GrB_UnaryOp *unaryop, GxB_unary_function function, GrB_Type ztype, GrB_Type xtype, const char *unop_name, const char *unop_defn );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_xtype-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_xtype","text":"GxB_UnaryOp_xtype(xtype, unaryop)\n\nGxBUnaryOpxtype is historical.  Use GxBUnaryOpxtype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_UnaryOp_xtype ( GrB_Type *xtype, GrB_UnaryOp unaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_xtype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_xtype_name","text":"GxB_UnaryOp_xtype_name(type_name, unaryop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_UnaryOp_xtype_name ( char *type_name, const GrB_UnaryOp unaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_ztype-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_ztype","text":"GxB_UnaryOp_ztype(ztype, unaryop)\n\nGxBUnaryOpztype is historical.  Use GxBUnaryOpztype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_UnaryOp_ztype ( GrB_Type *ztype, GrB_UnaryOp unaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_ztype_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_UnaryOp_ztype_name","text":"GxB_UnaryOp_ztype_name(type_name, unaryop)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_UnaryOp_ztype_name ( char *type_name, const GrB_UnaryOp unaryop );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_Iterator_attach-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_Iterator_attach","text":"GxB_Vector_Iterator_attach(iterator, v, desc)\n\nIf successful, the iterator is attached to the vector, but not to any specific entry.  Use GxBVectorIterator_seek to move the iterator to a particular entry.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_Iterator_attach ( GxB_Iterator iterator, GrB_Vector v, GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp1st-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp1st","text":"GxB_Vector_apply_BinaryOp1st(w, mask, accum, op, x, u, desc)\n\nhistorical: identical to GxBVectorapply_BinaryOp1st\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_BinaryOp1st ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Scalar x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp1st_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp1st_FC32","text":"GxB_Vector_apply_BinaryOp1st_FC32(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_BinaryOp1st_FC32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, GxB_FC32_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp1st_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp1st_FC64","text":"GxB_Vector_apply_BinaryOp1st_FC64(w, mask, accum, op, x, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_BinaryOp1st_FC64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, GxB_FC64_t x, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp2nd-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp2nd","text":"GxB_Vector_apply_BinaryOp2nd(w, mask, accum, op, u, y, desc)\n\nhistorical: identical to GrBVectorapplyBinaryOp2ndScalar\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_BinaryOp2nd ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, const GrB_Scalar y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp2nd_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp2nd_FC32","text":"GxB_Vector_apply_BinaryOp2nd_FC32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_BinaryOp2nd_FC32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, GxB_FC32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp2nd_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_BinaryOp2nd_FC64","text":"GxB_Vector_apply_BinaryOp2nd_FC64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_BinaryOp2nd_FC64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Vector u, GxB_FC64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_IndexOp_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_IndexOp_FC32","text":"GxB_Vector_apply_IndexOp_FC32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_IndexOp_FC32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, GxB_FC32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_IndexOp_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_apply_IndexOp_FC64","text":"GxB_Vector_apply_IndexOp_FC64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_apply_IndexOp_FC64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, GxB_FC64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_assign_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_assign_FC32","text":"GxB_Vector_assign_FC32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_assign_FC32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, GxB_FC32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_assign_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_assign_FC64","text":"GxB_Vector_assign_FC64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_assign_FC64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, GxB_FC64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_build_FC32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_build_FC32","text":"GxB_Vector_build_FC32(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_build_FC32 ( GrB_Vector w, const GrB_Index *I, const GxB_FC32_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_build_FC64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_build_FC64","text":"GxB_Vector_build_FC64(w, I, X, nvals, dup)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_build_FC64 ( GrB_Vector w, const GrB_Index *I, const GxB_FC64_t *X, GrB_Index nvals, const GrB_BinaryOp dup );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_build_Scalar-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_build_Scalar","text":"GxB_Vector_build_Scalar(w, I, scalar, nvals)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_build_Scalar ( GrB_Vector w, const GrB_Index *I, GrB_Scalar scalar, GrB_Index nvals );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_deserialize-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_deserialize","text":"GxB_Vector_deserialize(w, type, blob, blob_size, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_deserialize ( GrB_Vector *w, GrB_Type type, const void *blob, GrB_Index blob_size, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_diag-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_diag","text":"GxB_Vector_diag(v, A, k, desc)\n\nv must already exist on input, of the correct length; that is GrBVectorsize (&len,v) must return len = 0 if k >= n or k <= -m, len = min(m,n-k) if k is in the range 0 to n-1, and len = min(m+k,n) if k is in the range -1 to -m+1.  Any existing entries in v are discarded.  The type of v is preserved, so that if the type of A and v differ, the entries are typecasted into the type of v.  Any settings made to v by GxBVectorOption_set (bitmap switch and sparsity control) are unchanged.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_diag ( GrB_Vector v, const GrB_Matrix A, int64_t k, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_eWiseUnion-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_eWiseUnion","text":"GxB_Vector_eWiseUnion(w, mask, accum, add, u, alpha, v, beta, desc)\n\nif A(i,j) and B(i,j) are both present:          C(i,j) = A(i,j) + B(i,j)      else if A(i,j) is present but not B(i,j)          C(i,j) = A(i,j) + beta      else if B(i,j) is present but not A(i,j) C(i,j) = alpha + B(i,j)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_eWiseUnion ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_BinaryOp add, const GrB_Vector u, const GrB_Scalar alpha, const GrB_Vector v, const GrB_Scalar beta, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_export_Bitmap-NTuple{10, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_export_Bitmap","text":"GxB_Vector_export_Bitmap(v, type, n, vb, vx, vb_size, vx_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_export_Bitmap ( GrB_Vector *v, GrB_Type *type, GrB_Index *n, int8_t **vb, void **vx, GrB_Index *vb_size, GrB_Index *vx_size, bool *iso, GrB_Index *nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_export_CSC-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_export_CSC","text":"GxB_Vector_export_CSC(v, type, n, vi, vx, vi_size, vx_size, iso, nvals, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_export_CSC ( GrB_Vector *v, GrB_Type *type, GrB_Index *n, GrB_Index **vi, void **vx, GrB_Index *vi_size, GrB_Index *vx_size, bool *iso, GrB_Index *nvals, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_export_Full-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_export_Full","text":"GxB_Vector_export_Full(v, type, n, vx, vx_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_export_Full ( GrB_Vector *v, GrB_Type *type, GrB_Index *n, void **vx, GrB_Index *vx_size, bool *iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractElement_FC32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractElement_FC32","text":"GxB_Vector_extractElement_FC32(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_extractElement_FC32 ( GxB_FC32_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractElement_FC64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractElement_FC64","text":"GxB_Vector_extractElement_FC64(x, v, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_extractElement_FC64 ( GxB_FC64_t *x, const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractTuples_FC32-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractTuples_FC32","text":"GxB_Vector_extractTuples_FC32(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_extractTuples_FC32 ( GrB_Index *I, GxB_FC32_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractTuples_FC64-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_extractTuples_FC64","text":"GxB_Vector_extractTuples_FC64(I, X, nvals, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_extractTuples_FC64 ( GrB_Index *I, GxB_FC64_t *X, GrB_Index *nvals, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_fprint-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_fprint","text":"GxB_Vector_fprint(v, name, pr, f)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_fprint ( GrB_Vector v, const char *name, GxB_Print_Level pr, FILE *f );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_import_Bitmap-NTuple{10, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_import_Bitmap","text":"GxB_Vector_import_Bitmap(v, type, n, vb, vx, vb_size, vx_size, iso, nvals, desc)\n\n\n\nGxBVectorpack_Bitmap: pack a vector in bitmap format\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_import_Bitmap ( GrB_Vector *v, GrB_Type type, GrB_Index n, int8_t **vb, void **vx, GrB_Index vb_size, GrB_Index vx_size, bool iso, GrB_Index nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_import_CSC-NTuple{11, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_import_CSC","text":"GxB_Vector_import_CSC(v, type, n, vi, vx, vi_size, vx_size, iso, nvals, jumbled, desc)\n\n\n\nGxBVectorpack_CSC: import/pack a vector in CSC format\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_import_CSC ( GrB_Vector *v, GrB_Type type, GrB_Index n, GrB_Index **vi, void **vx, GrB_Index vi_size, GrB_Index vx_size, bool iso, GrB_Index nvals, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_import_Full-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_import_Full","text":"GxB_Vector_import_Full(v, type, n, vx, vx_size, iso, desc)\n\n\n\nGxBVectorpack_Full: pack a vector in full format\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_import_Full ( GrB_Vector *v, GrB_Type type, GrB_Index n, void **vx, GrB_Index vx_size, bool iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_isStoredElement-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_isStoredElement","text":"GxB_Vector_isStoredElement(v, i)\n\nGxBVectorisStoredElement determines if v(i) is present in the structure of the vector v, as a stored element.  It does not return the value.  It returns GrBSUCCESS if the element is present, or GrBNO_VALUE otherwise.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_isStoredElement ( const GrB_Vector v, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_iso-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_iso","text":"GxB_Vector_iso(iso, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_iso ( bool *iso, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_memoryUsage-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_memoryUsage","text":"GxB_Vector_memoryUsage(size, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_memoryUsage ( size_t *size, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_pack_Bitmap-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_pack_Bitmap","text":"GxB_Vector_pack_Bitmap(v, vb, vx, vb_size, vx_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_pack_Bitmap ( GrB_Vector v, int8_t **vb, void **vx, GrB_Index vb_size, GrB_Index vx_size, bool iso, GrB_Index nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_pack_CSC-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_pack_CSC","text":"GxB_Vector_pack_CSC(v, vi, vx, vi_size, vx_size, iso, nvals, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_pack_CSC ( GrB_Vector v, GrB_Index **vi, void **vx, GrB_Index vi_size, GrB_Index vx_size, bool iso, GrB_Index nvals, bool jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_pack_Full-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_pack_Full","text":"GxB_Vector_pack_Full(v, vx, vx_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_pack_Full ( GrB_Vector v, void **vx, GrB_Index vx_size, bool iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_reduce_FC32-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_reduce_FC32","text":"GxB_Vector_reduce_FC32(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_reduce_FC32 ( GxB_FC32_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_reduce_FC64-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_reduce_FC64","text":"GxB_Vector_reduce_FC64(c, accum, monoid, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_reduce_FC64 ( GxB_FC64_t *c, const GrB_BinaryOp accum, const GrB_Monoid monoid, const GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_resize-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_resize","text":"GxB_Vector_resize(w, nrows_new)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_resize ( GrB_Vector w, GrB_Index nrows_new );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_select-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_select","text":"GxB_Vector_select(w, mask, accum, op, u, Thunk, desc)\n\nGrBselect and with the GrBIndexUnaryOp operators should be used instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_select ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GxB_SelectOp op, const GrB_Vector u, const GrB_Scalar Thunk, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_select_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_select_FC32","text":"GxB_Vector_select_FC32(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_select_FC32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, GxB_FC32_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_select_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_select_FC64","text":"GxB_Vector_select_FC64(w, mask, accum, op, u, y, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_select_FC64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_IndexUnaryOp op, const GrB_Vector u, GxB_FC64_t y, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_serialize-NTuple{4, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_serialize","text":"GxB_Vector_serialize(blob_handle, blob_size_handle, u, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_serialize ( void **blob_handle, GrB_Index *blob_size_handle, GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_setElement_FC32-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_setElement_FC32","text":"GxB_Vector_setElement_FC32(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_setElement_FC32 ( GrB_Vector w, GxB_FC32_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_setElement_FC64-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_setElement_FC64","text":"GxB_Vector_setElement_FC64(w, x, i)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_setElement_FC64 ( GrB_Vector w, GxB_FC64_t x, GrB_Index i );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_sort-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_sort","text":"GxB_Vector_sort(w, p, op, u, desc)\n\n============================================================================== GxBVectorsort and GxBMatrixsort: sort a matrix or vector ==============================================================================\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_sort ( GrB_Vector w, GrB_Vector p, GrB_BinaryOp op, GrB_Vector u, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign","text":"GxB_Vector_subassign(w, mask, accum, u, I, ni, desc)\n\n–- assign –––––––––––––––––––––––––––––––––\n\nGrBMatrixassign      C<M>(I,J) += A        M same size as matrix C.                                              A is |I|-by-|J|\n\nGrBVectorassign      w<m>(I)   += u        m same size as column vector w.                                              u is |I|-by-1\n\nGrBRowassign         C<m'>(i,J) += u'      m is a column vector the same                                              size as a row of C.                                              u is |J|-by-1, i is a scalar.\n\nGrBColassign         C<m>(I,j) += u        m is a column vector the same                                              size as a column of C.                                              u is |I|-by-1, j is a scalar.\n\n–- subassign –––––––––––––––––––––––––––––––-\n\nGxBMatrixsubassign   C(I,J)<M> += A        M same size as matrix A.                                              A is |I|-by-|J|\n\nGxBVectorsubassign   w(I)<m>   += u        m same size as column vector u.                                              u is |I|-by-1\n\nGxBRowsubassign      C(i,J)<m'> += u'      m same size as column vector u.                                              u is |J|-by-1, i is a scalar.\n\nGxBColsubassign      C(I,j)<m> += u        m same size as column vector u. u is |I|-by-1, j is a scalar.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, const GrB_Vector u, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_BOOL-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_BOOL","text":"GxB_Vector_subassign_BOOL(w, mask, accum, x, I, ni, desc)\n\nAssigns a single scalar to a subvector, w(I)<mask> = accum(w(I),x).  The scalar x is implicitly expanded into a vector u of size ni-by-1, with each entry in u equal to x, and then w(I)<mask> = accum(w(I),u) is done.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_BOOL ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, bool x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FC32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FC32","text":"GxB_Vector_subassign_FC32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_FC32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, GxB_FC32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FC64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FC64","text":"GxB_Vector_subassign_FC64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_FC64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, GxB_FC64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FP32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FP32","text":"GxB_Vector_subassign_FP32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_FP32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, float x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FP64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_FP64","text":"GxB_Vector_subassign_FP64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_FP64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, double x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT16","text":"GxB_Vector_subassign_INT16(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_INT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT32","text":"GxB_Vector_subassign_INT32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_INT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT64","text":"GxB_Vector_subassign_INT64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_INT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_INT8","text":"GxB_Vector_subassign_INT8(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_INT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, int8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_Scalar-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_Scalar","text":"GxB_Vector_subassign_Scalar(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_Scalar ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, GrB_Scalar x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UDT-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UDT","text":"GxB_Vector_subassign_UDT(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_UDT ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, void *x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT16-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT16","text":"GxB_Vector_subassign_UINT16(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_UINT16 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint16_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT32-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT32","text":"GxB_Vector_subassign_UINT32(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_UINT32 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint32_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT64-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT64","text":"GxB_Vector_subassign_UINT64(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_UINT64 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint64_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT8-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_subassign_UINT8","text":"GxB_Vector_subassign_UINT8(w, mask, accum, x, I, ni, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_subassign_UINT8 ( GrB_Vector w, const GrB_Vector mask, const GrB_BinaryOp accum, uint8_t x, const GrB_Index *I, GrB_Index ni, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_type-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_type","text":"GxB_Vector_type(type, v)\n\nNOTE: GxBVectortype is historical.  Use GxBVectortype_name instead.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_type ( GrB_Type *type, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_type_name-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_type_name","text":"GxB_Vector_type_name(type_name, v)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_type_name ( char *type_name, const GrB_Vector v );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_unpack_Bitmap-NTuple{8, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_unpack_Bitmap","text":"GxB_Vector_unpack_Bitmap(v, vb, vx, vb_size, vx_size, iso, nvals, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_unpack_Bitmap ( GrB_Vector v, int8_t **vb, void **vx, GrB_Index *vb_size, GrB_Index *vx_size, bool *iso, GrB_Index *nvals, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_unpack_CSC-NTuple{9, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_unpack_CSC","text":"GxB_Vector_unpack_CSC(v, vi, vx, vi_size, vx_size, iso, nvals, jumbled, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_unpack_CSC ( GrB_Vector v, GrB_Index **vi, void **vx, GrB_Index *vi_size, GrB_Index *vx_size, bool *iso, GrB_Index *nvals, bool *jumbled, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_unpack_Full-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_Vector_unpack_Full","text":"GxB_Vector_unpack_Full(v, vx, vx_size, iso, desc)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_Vector_unpack_Full ( GrB_Vector v, void **vx, GrB_Index *vx_size, bool *iso, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_deserialize_type_name-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_deserialize_type_name","text":"GxB_deserialize_type_name(type_name, blob, blob_size)\n\nGxBdeserializetypename extracts the typename of the GrBType of the GrBMatrix or GrBVector held in a serialized blob.  On input, typename must point to a user-owned char array of size at least GxBMAXNAMELEN (it must not point into the blob itself).  On output, typename will contain a null-terminated string with the corresponding C type name.  If the blob holds a matrix of a built-in type, the name is returned as \"bool\" for GrBBOOL, \"uint8t\" for GrBUINT8, \"float complex\" for GxBFC32, etc. See GxBTypename to convert this name into a GrB_Type.\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_deserialize_type_name ( char *type_name, const void *blob, GrB_Index blob_size );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_init-NTuple{5, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_init","text":"GxB_init(mode, user_malloc_function, user_calloc_function, user_realloc_function, user_free_function)\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_init ( GrB_Mode mode, void * (* user_malloc_function ) (size_t), void * (* user_calloc_function ) (size_t, size_t), void * (* user_realloc_function ) (void *, size_t), void (* user_free_function ) (void *) );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.GxB_kron-NTuple{7, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.GxB_kron","text":"GxB_kron(C, Mask, accum, op, A, B, desc)\n\nGxBkron is historical; use GrBkronecker instead\n\nPrototype\n\nGB_PUBLIC GrB_Info GxB_kron ( GrB_Matrix C, const GrB_Matrix Mask, const GrB_BinaryOp accum, const GrB_BinaryOp op, const GrB_Matrix A, const GrB_Matrix B, const GrB_Descriptor desc );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_allocate-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_allocate","text":"rmm_wrap_allocate(size)\n\nThe two PMR-based allocate/deallocate signatures (C-style):\n\nPrototype\n\nvoid *rmm_wrap_allocate (size_t *size);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_calloc-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_calloc","text":"rmm_wrap_calloc(n, size)\n\nPrototype\n\nvoid *rmm_wrap_calloc (size_t n, size_t size);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_deallocate-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_deallocate","text":"rmm_wrap_deallocate(p, size)\n\nPrototype\n\nvoid rmm_wrap_deallocate (void *p, size_t size);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_finalize-Tuple{}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_finalize","text":"rmm_wrap_finalize()\n\nPrototype\n\nvoid rmm_wrap_finalize (void);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_free-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_free","text":"rmm_wrap_free(p)\n\nPrototype\n\nvoid rmm_wrap_free (void *p);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_initialize-Tuple{Any, Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_initialize","text":"rmm_wrap_initialize(mode, init_pool_size, max_pool_size)\n\nPrototype\n\nint rmm_wrap_initialize ( RMM_MODE mode, size_t init_pool_size, size_t max_pool_size );\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_malloc-Tuple{Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_malloc","text":"rmm_wrap_malloc(size)\n\nThe four malloc/calloc/realloc/free signatures:\n\nPrototype\n\nvoid *rmm_wrap_malloc (size_t size);\n\n\n\n\n\n","category":"method"},{"location":"api/#SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_realloc-Tuple{Any, Any}","page":"-","title":"SuiteSparseGraphBLAS.LibGraphBLAS.rmm_wrap_realloc","text":"rmm_wrap_realloc(p, newsize)\n\nPrototype\n\nvoid *rmm_wrap_realloc (void *p, size_t newsize);\n\n\n\n\n\n","category":"method"},{"location":"selectops/#Index-Operators","page":"Index Operators","title":"Index Operators","text":"","category":"section"},{"location":"selectops/","page":"Index Operators","title":"Index Operators","text":"An IndexUnaryOp is a unary operation which is able to access the location of an element as well as its value. They define predicates for use with the select! function as well as index access for apply!.","category":"page"},{"location":"selectops/#Built-Ins","page":"Index Operators","title":"Built-Ins","text":"","category":"section"},{"location":"selectops/","page":"Index Operators","title":"Index Operators","text":"Built-in IndexUnaryOpss can be found in the SelectOps submodule. However users should pass the equivalent Julia function when possible.","category":"page"},{"location":"selectops/","page":"Index Operators","title":"Index Operators","text":"SuiteSparseGraphBLAS.diagindex\nSuiteSparseGraphBLAS.isindexop\nSuiteSparseGraphBLAS.IndexOp","category":"page"},{"location":"selectops/#SuiteSparseGraphBLAS.IndexUnaryOps.diagindex","page":"Index Operators","title":"SuiteSparseGraphBLAS.IndexUnaryOps.diagindex","text":"diagindex(xᵢⱼ) -> (j - (i + y))\n\nDummy function for use in apply.  Returns the column diagonal index of each element.\n\n\n\n\n\n","category":"function"},{"location":"selectops/#SuiteSparseGraphBLAS.IndexUnaryOps.isindexop","page":"Index Operators","title":"SuiteSparseGraphBLAS.IndexUnaryOps.isindexop","text":"isindexop(op)::Bool\n\nIf isindexop(op) is true then apply will wrap op in IndexOp. op must have the signature f(x, i::Int64, j::Int64, y).  This function is only called from apply.\n\n\n\n\n\n","category":"function"},{"location":"selectops/#SuiteSparseGraphBLAS.IndexUnaryOps.IndexOp","page":"Index Operators","title":"SuiteSparseGraphBLAS.IndexUnaryOps.IndexOp","text":"IndexOp{F}\n\nWrapper which indicates to apply that an operator has the signature: f(x, i::Int64, j::Int64, y) where x is the value at a particular index, i and j are the indices, and y is an auxiliary input.\n\nSee also: isindexop\n\n\n\n\n\n","category":"type"},{"location":"monoids/#Monoids","page":"Monoids","title":"Monoids","text":"","category":"section"},{"location":"monoids/","page":"Monoids","title":"Monoids","text":"A monoid is made up of a set or domain T and a binary operator z = f(x y) operating on the same domain, T times T rightarrow T. This binary operator must be associative, that is f(a f(b c)) = f(f(a b) c) is always true. Associativity is important for operations like reduce and the multiplication step of mul!.","category":"page"},{"location":"monoids/","page":"Monoids","title":"Monoids","text":"The operator is also be equipped with an identity such that f(x 0) = f(0 x) = x. Some monoids are equipped with a terminal or annihilator such that z = f(z x) forall x.","category":"page"},{"location":"monoids/","page":"Monoids","title":"Monoids","text":"Monoids are used primarily in the reduce operation. Their other use is as a component of semirings in the mul! operation.","category":"page"},{"location":"monoids/#Built-Ins","page":"Monoids","title":"Built-Ins","text":"","category":"section"},{"location":"monoids/","page":"Monoids","title":"Monoids","text":"Julia Function GraphBLAS Name Notes\nmax MAX_MONOID identity: typemax, terminal: typemin\nmin MIN_MONOID identity: typemin, terminal: typemax\n+ PLUS_MONOID identity: zero\n* TIMES_MONOID identity: one, terminal: zero (terminal only for non-Float types)\nany ANY_MONOID identity, terminal: any value in domain\n& BAND_MONOID identity: typemax, terminal: zero\n| BOR_MONOID identity: zero, terminal: typemax\n⊻ BXOR_MONOID identity: zero\nlxor LXOR_MONOID identity: false\n== LXNOR_MONOID identity: true\n∨ LOR_MONOID identity: false, term: true\n∧ LAND_MONOID identity: true, term: false\n  \n  \n  ","category":"page"},{"location":"monoids/","page":"Monoids","title":"Monoids","text":"Monoid","category":"page"},{"location":"monoids/#SuiteSparseGraphBLAS.Monoids.Monoid","page":"Monoids","title":"SuiteSparseGraphBLAS.Monoids.Monoid","text":"Monoid{F, I, T}\n\nA Monoid is a binary function fn along with an identity and an optional terminal value.\n\nThe identity and terminal should be functions of a type, or nothing for the terminal. For instance Monoid(*, one, zero) would be the Monoid for scalar multiplication.\n\nMonoids are translated into TypedMonoids before calling into GraphBLAS itself.\n\n\n\n\n\n","category":"type"},{"location":"unaryops/#Unary-Operators","page":"Unary Operators","title":"Unary Operators","text":"","category":"section"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"UnaryOps are fairly straightforward z = f(x) and their meaning should be clear from the name in most cases. ","category":"page"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"UnaryOps are used only in the map and apply functions.","category":"page"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"using SuiteSparseGraphBLAS\n\nx = GBVector([1.5, 0, pi])\n\ny = map(sin, x)\n\nmap(asin, y)","category":"page"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"Internally functions are lowered like this:","category":"page"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"using SuiteSparseGraphBLAS\n\nop = unaryop(sin, Float64)\n\nmap(op, GBVector([1.5, 0, pi]))","category":"page"},{"location":"unaryops/#Built-Ins","page":"Unary Operators","title":"Built-Ins","text":"","category":"section"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"The following functions are built into SuiteSparse:GraphBLAS. They are, much faster than arbitrary Julia functions and should be used when possible.","category":"page"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"Julia Function GraphBLAS Name Notes\nidentity IDENTITY \n- AINV \ninv MINV \none ONE \n! LNOT \nabs ABS \n~ BNOT \nrowindex POSITIONI \ncolindex POSITIONJ \nsqrt SQRT \nlog LOG \nexp EXP \nlog10 LOG10 \nlog2 LOG2 \nexp2 EXP2 \nexpm1 EXPM1 \nlog1p LOG1P \nsin SIN \ncos COS \ntan TAN \nasin ASIN \nacos ACOS \natan ATAN \nsinh SINH \ncosh COSH \ntanh TANH \nasinh ASINH \nacosh ACOSH \natanh ATANH \nsign SIGNUM \nceil CEIL \nfloor FLOOR \nround ROUND \ntrunc TRUNC \nSpecialFunctions.lgamma LGAMMA \nSpecialFunctions.gamma TGAMMA \nerf ERF \nerfc ERFC \nfrexpx FREXPX \nfrexpe FREXPE \nisinf ISINF \nisnan ISNAN \nisfinite ISFINITE \nconj CONJ \nreal CREAL \nimag CIMAG \nangle CARG ","category":"page"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"Unary functions unique to SuiteSparseGraphBLAS are:","category":"page"},{"location":"unaryops/","page":"Unary Operators","title":"Unary Operators","text":"SuiteSparseGraphBLAS.rowindex\nSuiteSparseGraphBLAS.colindex","category":"page"},{"location":"unaryops/#SuiteSparseGraphBLAS.UnaryOps.rowindex","page":"Unary Operators","title":"SuiteSparseGraphBLAS.UnaryOps.rowindex","text":"rowindex(xᵢⱼ) -> i\n\nDummy function for use with apply. Returns the row index of an element.\n\n\n\n\n\n","category":"function"},{"location":"unaryops/#SuiteSparseGraphBLAS.UnaryOps.colindex","page":"Unary Operators","title":"SuiteSparseGraphBLAS.UnaryOps.colindex","text":"colindex(xᵢⱼ) -> j\n\nDummy function for use with apply. Returns the row index of an element.\n\n\n\n\n\n","category":"function"},{"location":"arrays/#Array-Types","page":"Array Types","title":"Array Types","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"There are two primary array types in SuiteSparseGraphBLAS.jl: GBVector and GBMatrix, as well as a few specialized versions of those array types. The full type hierarchy is:","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"AbstractGBArray{T, F, O, N} <: AbstractSparseArray{Union{T, F}, N}\n ├ N = 2 ─ AbstractGBMatrix{T, F} \n │   ├─ GBMatrix{T, F, RuntimeOrder()}\n │   ├─ OrientedGBMatrix{T, F, O}\n │   └─ GBShallowMatrix{T, F, ColMajor()}\n └ N = 1, O = ColMajor() ─ AbstractGBVector{T, F}\n     ├─ GBVector{T, F}\n     └─ GBShallowVector{T, F}","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"The T parameter is the element type of the array, N is the dimensionality, F is the type of the fill value (often Nothing or T), and O is the storage order. The OrientedGBMatrix restricts the orientation to the parameter O to either ByRow() or ByCol(). ","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"All of these types attempt to implement most of the AbstractArray interface, and the relevant parts of the SparseArrays interface.","category":"page"},{"location":"arrays/#GBMatrix","page":"Array Types","title":"GBMatrix","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"The GBMatrix is an opaque sparse matrix structure, which adapts to the sparsity of a matrix by changing the implementation internally. There are 4 different internal representations, all stored in either row or column orientation:","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"Dense - Equivalent to a Julia Matrix, except it may be stored in RowMajor() order.\nBitmap - 2 dense arrays, one storing booleans in the pattern of the matrix, the other storing the values.\nSparse Compressed - Compressed Sparse Column (CSC) or Compressed Sparse Row(CSR)\nDoubly Compressed or Hypersparse - Doubly Compressed Sparse Column (DCSC or Hypersparse CSC) and Doubly Compressed Sparse Row (DCSR or Hypersparse CSR). See this paper for more information: pdf.","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"Additionally, when the stored values in a GBMatrix are uniform the value array may be stored in the iso version of one of the formats above. Rather than storing the full value array, an iso GBMatrix will only store the single scalar to improve performance. This is useful for matrices like the unweighted adjacency matrix, where all stored values may be true. ","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"Users should rarely need to directly interact with the underlying storage format, SuiteSparse:GraphBLAS will automatically convert between them as necessary.","category":"page"},{"location":"arrays/#Construction","page":"Array Types","title":"Construction","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"There are several methods to construct GBArrays. Shown here are empty construction, conversion from a dense matrix and a sparse matrix, and coordinate form with uniform or iso coefficients. ","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"using SuiteSparseGraphBLAS\nusing SparseArrays","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"x = GBMatrix{Bool}(20_000_000, 50_000)\nx = GBMatrix([[1,2] [3,4]])\nx = GBMatrix(sprand(100, 100, 0.5); fill = 0.0)\nx = GBMatrix(\n    rand(1:50_000, 5000), rand(1:500_000, 5000), 1, 500_000, 500_000\n)","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"GBMatrix","category":"page"},{"location":"arrays/#SuiteSparseGraphBLAS.GBMatrix","page":"Array Types","title":"SuiteSparseGraphBLAS.GBMatrix","text":"GBMatrix{T, F} <: AbstractSparseArray{T, UInt64, 2}\n\nTwo-dimensional GraphBLAS array with elements of type T. F is the type of the fill-value,  which is typically Missing or T.  Internal representation is specified as opaque, but in this implementation is stored as one of  the following in either row or column orientation:\n\n1. Dense\n2. Bitmap\n3. Sparse Compressed\n4. Hypersparse\n\nThe storage type is automatically determined by the library.\n\n#Signatures\n\nGBMatrix{T, F}(nrows::Integer, ncols::Integer; fill = defaultfill(F))\nGBMatrix{T}(nrows::Integer, ncols::Integer; fill = defaultfill(T))\nGBMatrix(I::AbstractVector, J::AbstractVector, X::AbstractVector{T}, dims...; fill=defaultfill(T), combine=+)\nGBMatrix(I::AbstractVector, J::AbstractVector, x::T, dims...; fill=defaultfill(T), combine=+)\nGBMatrix(A::Union{<:AbstractGBArray, <:AbstractMatrix}; fill = defaultfill(eltype(A)))\n\nAll constructors, no matter their input, may specify an element type T as well as a fill type F, conversions are handled internally. These parameters will be inferred in most cases.\n\nGBMatrix construction from an existing AbstractArray will maintain the storage order of the original, typically ColMajor(). \n\n\n\n\n\n","category":"type"},{"location":"arrays/#GBVector","page":"Array Types","title":"GBVector","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"A GBVector is the one-dimensional equivalent of the GBMatrix, and internally a GBVector is represented in exactly the same fashion. However, they are always column-oriented. ","category":"page"},{"location":"arrays/#Construction-2","page":"Array Types","title":"Construction","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"v = GBVector{ComplexF32}(100)\nv = GBMatrix(rand(ComplexF64, 3); fill = nothing)\nv = GBVector(sprand(Bool, 100_000_000, 0.001))","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"GBVector","category":"page"},{"location":"arrays/#SuiteSparseGraphBLAS.GBVector","page":"Array Types","title":"SuiteSparseGraphBLAS.GBVector","text":"GBVector{T, F} <: AbstractSparseArray{T, UInt64, 1}\n\nOne-dimensional GraphBLAS array with elements of type T. F is the type of the fill-value,  which is typically Missing or T.  Internal representation is specified as opaque, but may be either a dense vector, bitmap vector, or  compressed sparse vector.\n\nSee also: GBMatrix.\n\nConstruction Signatures\n\nGBVector{T, F}(n::Integer; fill = defaultfill(F))\nGBVector{T}(n::Integer; fill = defaultfill(T))\nGBVector(I::AbstractVector, X::AbstractVector{T}, n; fill=defaultfill(T), combine=+)\nGBVector(I::AbstractVector, x::T, n; fill=defaultfill(T), combine=+)\nGBVector(v::Union{<:AbstractGBVector, <:AbstractVector}; fill = defaultfill(eltype(v)))\n\nAll constructors, no matter their input, may specify parameters for  element type T as well as a fill type F, conversions are handled internally. These parameters will be inferred in most cases.\n\n\n\n\n\n","category":"type"},{"location":"arrays/#Indexing","page":"Array Types","title":"Indexing","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"The usual AbstractArray and SparseArray indexing capabilities are available. Including indexing by scalars, vectors, and ranges.","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"danger: Indexing Structural Zeros\nWhen indexing a SparseMatrixCSC from SparseArrays a structural, or implicit, zero will be returned as zero(T) where T is the element type of the matrix.When indexing a GBArray structural zeros default to nothing. While this is a significant departure from the SparseMatrixCSC it more closely matches the GraphBLAS spec, and enables the consuming method to determine the value of implicit zeros in the presence of explicit zeros. For instance with an element type of Float64 you may want the implicit zero to be 0.0, -∞ or +∞ depending on your algorithm. In addition, for graph algorithms there may be a distinction between an implicit zero, indicating the lack of an edge between two vertices in an adjacency matrix, and an explicit zero where the edge exists but has a 0 weight.However, many functions outside of GraphBLAS will throw an error if they receive nothing from an indexing operation. To accomodate these functions the user may set the fill value for an AbstractGBArray on construction and with setfill and setfill!.","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"A = GBMatrix([1,1,2,2,3,4,4,5,6,7,7,7], [2,4,5,7,6,1,3,6,3,3,4,5], [1:12...])\nSparseMatrixCSC(A)\nA[4]\nA[1,2]\nA[[1,3,5,7], :]\nA[1:2:7, :]\nA[:,:]\nA[:, 5]","category":"page"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"The functionality illustrated above extends to GBVector as well.","category":"page"},{"location":"arrays/#Transpose","page":"Array Types","title":"Transpose","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"The lazy Julia transpose is available, and the adjoint operator ' is also overloaded to be equivalent for non-Complex types.","category":"page"},{"location":"arrays/#Special-GBArray-Types","page":"Array Types","title":"Special GBArray Types","text":"","category":"section"},{"location":"arrays/","page":"Array Types","title":"Array Types","text":"GBMatrixR\nGBMatrixC\nSuiteSparseGraphBLAS.GBShallowMatrix\nSuiteSparseGraphBLAS.GBShallowVector\nSuiteSparseGraphBLAS.GBScalar","category":"page"},{"location":"arrays/#SuiteSparseGraphBLAS.GBMatrixR","page":"Array Types","title":"SuiteSparseGraphBLAS.GBMatrixR","text":"OrientedGBMatrix{T, F, O} <: AbstractSparseArray{T, UInt64, 2}\n\nTwo-dimensional GraphBLAS array with elements of type T. F is the type of the fill-value,  which is typically Missing or T.  Exactly the same as GBMatrix, except the memory orientation is static: either StorageOrders.RowMajor() (default) or StorageOrders.ColMajor().\n\nThe aliases GBMatrixC and GBMatrixR are the preferred construction methods.\n\n#Signatures\n\nGBMatrix[R | C]{T, F}(nrows::Integer, ncols::Integer; fill = defaultfill(F))\nGBMatrix[R | C]{T}(nrows::Integer, ncols::Integer; fill = defaultfill(T))\nGBMatrix[R | C](I::AbstractVector, J::AbstractVector, X::AbstractVector{T}, dims...; fill=defaultfill(T), combine=+)\nGBMatrix[R | C](I::AbstractVector, J::AbstractVector, x::T, dims...; fill=defaultfill(T), combine=+)\nGBMatrix[R | C](A::Union{<:AbstractGBArray, <:AbstractMatrix}; fill = defaultfill(eltype(A)))\n\nAll constructors, no matter their input, may specify an element type T as well as a fill type F, conversions are handled internally. These parameters will be inferred in most cases.\n\n\n\n\n\n\n\n","category":"type"},{"location":"arrays/#SuiteSparseGraphBLAS.GBMatrixC","page":"Array Types","title":"SuiteSparseGraphBLAS.GBMatrixC","text":"OrientedGBMatrix{T, F, O} <: AbstractSparseArray{T, UInt64, 2}\n\nTwo-dimensional GraphBLAS array with elements of type T. F is the type of the fill-value,  which is typically Missing or T.  Exactly the same as GBMatrix, except the memory orientation is static: either StorageOrders.RowMajor() (default) or StorageOrders.ColMajor().\n\nThe aliases GBMatrixC and GBMatrixR are the preferred construction methods.\n\n#Signatures\n\nGBMatrix[R | C]{T, F}(nrows::Integer, ncols::Integer; fill = defaultfill(F))\nGBMatrix[R | C]{T}(nrows::Integer, ncols::Integer; fill = defaultfill(T))\nGBMatrix[R | C](I::AbstractVector, J::AbstractVector, X::AbstractVector{T}, dims...; fill=defaultfill(T), combine=+)\nGBMatrix[R | C](I::AbstractVector, J::AbstractVector, x::T, dims...; fill=defaultfill(T), combine=+)\nGBMatrix[R | C](A::Union{<:AbstractGBArray, <:AbstractMatrix}; fill = defaultfill(eltype(A)))\n\nAll constructors, no matter their input, may specify an element type T as well as a fill type F, conversions are handled internally. These parameters will be inferred in most cases.\n\n\n\n\n\n\n\n","category":"type"},{"location":"arrays/#SuiteSparseGraphBLAS.GBShallowMatrix","page":"Array Types","title":"SuiteSparseGraphBLAS.GBShallowMatrix","text":"GBShallowMatrix{T, F, O, P, B, A} <: AbstractSparseArray{T, UInt64, 2}\n\nShallow GraphBLAS matrix type wrapping a Julia-resident array. Currently supported only for Matrix\n\nThe primary constructor for this type is the pack function, although it may also be constructed directly via GBShallowMatrix(A::Matrix).\n\n\n\n\n\n","category":"type"},{"location":"arrays/#SuiteSparseGraphBLAS.GBShallowVector","page":"Array Types","title":"SuiteSparseGraphBLAS.GBShallowVector","text":"GBShallowVector{T, F, P, B, A} <: AbstractSparseArray{T, UInt64, 1}\n\nShallow GraphBLAS vector type wrapping a Julia-resident vector. Currently supported only for Vector\n\nThe primary constructor for this type is the pack function, although it may also be constructed directly via GBShallowVector(A::Vector).\n\n\n\n\n\n","category":"type"},{"location":"arrays/#SuiteSparseGraphBLAS.GBScalar","page":"Array Types","title":"SuiteSparseGraphBLAS.GBScalar","text":"\n\n\n\n","category":"type"},{"location":"operations/#Operations","page":"Operations","title":"Operations","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"GraphBLAS operations cover most of the typical linear algebra operations on arrays in Julia.","category":"page"},{"location":"operations/#Correspondence-of-GraphBLAS-C-functions-and-Julia-functions","page":"Operations","title":"Correspondence of GraphBLAS C functions and Julia functions","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"GraphBLAS Operation Julia\nmxm, mxv, vxm bf C langle M rangle = C odot AB mul! or *\neWiseMult bf C langle M rangle = C odot (A otimes B) emul[!] or . broadcasting\neWiseAdd bf C langle M rangle = C odot (A oplus  B) eadd[!]\nextract bf C langle M rangle = C odot A(IJ) extract[!], getindex\nsubassign bf C (IJ) langle M rangle = C(IJ) odot A subassign[!] or setindex!\nassign bf C langle M rangle (IJ) = C(IJ) odot A assign[!]\napply bf C langle M rangle = C odot fbf (A) apply[!], map[!] or . broadcasting\n bf C langle M rangle = C odot f(bf Ay) \n bf C langle M rangle = C odot f(xbf A) \nselect bf C langle M rangle = C odot f(bf Ak) select[!]\nreduce bf w langle m rangle = w odot oplus_j bf A(j) reduce[!]\n s = s odot oplus_ij  bf A(ij) \ntranspose bf C langle M rangle = C odot A^sf T gbtranspose[!], lazy: transpose, '\nkronecker bf C langle M rangle = C odot textkron(A B) kron[!]","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"where bf M is a GBArray mask, odot is a binary operator for accumulating into bf C, and otimes and oplus are binary operators or monoids. ","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"note: assign vs subassign\nsubassign is equivalent to assign except that the mask in subassign has the dimensions of bf C(IJ) vs the dimensions of C for assign. Elements outside of the mask will also never be modified by subassign. See the GraphBLAS User Guide for more details.","category":"page"},{"location":"operations/#Common-arguments","page":"Operations","title":"Common arguments","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"The operations typically accept one of the following types in the op argument.","category":"page"},{"location":"operations/#op-Function:","page":"Operations","title":"op - Function:","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"This argument determines oplus, otimes, or f in the table above as well as the semiring used in mul. See Operators for more information.","category":"page"},{"location":"operations/#desc-Descriptor:","page":"Operations","title":"desc - Descriptor:","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"The descriptor argument allows the user to modify the operation in some fashion. A new Descriptor can be created with default settings as: d = Descriptor(). The most common options are:","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"desc.[transpose_input1 | transpose_input2] == [true | false]:","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"Typically you should use Julia's built-in transpose functionality.","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"desc.complement_mask == [true | false]: ","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"If complement_mask is set the presence/truth value of the mask is complemented. See SuiteSparseGraphBLAS.Complement for a wrapper that sets this flag.","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"desc.structural_mask == [true | false]:","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"If structural_mask is set the presence of a value in the mask determines the presence of values in the output, rather than the actual value of the mask. See SuiteSparseGraphBLAS.Structural for a wrapper that sets this flag.","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"desc.replace_output == [true | false]:","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"If this option is set the operation will replace all values in the output matrix after the accumulation step.  If an index is found in the output matrix, but not in the results of the operation it will be set to nothing. ","category":"page"},{"location":"operations/#accum-Function:","page":"Operations","title":"accum - Function:","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"The accum keyword argument provides a binary operation to accumulate results into the result array.  The accumulation step is performed before masking.","category":"page"},{"location":"operations/#mask-GBArray:","page":"Operations","title":"mask - GBArray:","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"The mask keyword argument determines whether each index from the result of an operation appears in the output.  The mask may be structural, where the presence of a value indicates the mask is true, or valued where the value of the mask indicates its truth value. mask = SuiteSparseGraphBLAS.Structural(A) will use a structural mask.","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"The mask may also be complemented. mask = SuiteSparseGraphBLAS.Complement(A) or mask = ~A will complement a mask. These two options may be combined, for example mask = ~SuiteSparseGraphBLAS.Structural(A).","category":"page"},{"location":"operations/#Operation-Documentation","page":"Operations","title":"Operation Documentation","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"All non-mutating operations below support a mutating form by adding an output array as the first argument as well as the ! function suffix. ","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"*\nemul\nemul!\neadd\neadd!\neunion\neunion!\nextract\nextract!\nsubassign!\nassign!\napply\napply!\nselect\nselect!\nBase.reduce\ngbtranspose\ngbtranspose!\nLinearAlgebra.kron\nLinearAlgebra.kron!\nmask\nmask!","category":"page"},{"location":"operations/#Base.:*","page":"Operations","title":"Base.:*","text":"*(A::GBArrayOrTranspose, B::GBArrayOrTranspose, op=(+,*); kwargs...)::GBArrayOrTranspose\n\nMultiply two GBArrays A and B using a semiring, which defaults to the arithmetic semiring +.*.\n\nEither operand may be transposed using ' or transpose(A) provided the dimensions match.\n\nThe mutating form, mul!(C, A, B, op; kwargs...) is identical except it stores the result in C::GBVecOrMat.\n\nThe operator syntax A * B can be used when the default semiring is desired, and *(max, +)(A, B) can be used otherwise.\n\nArguments\n\nA, B::GBArrayOrTranspose: A GBVector or GBMatrix, possibly transposed.\nop::Union{Tuple{Function, Function}, AbstractSemiring}: the semiring used for matrix multiplication. May be passed as a tuple of functions, or an AbstractSemiring found in the Semirings submodule.\n\nKeywords\n\nmask::Union{Nothing, GBArray} = nothing: optional mask which determines the output pattern.\naccum::Union{Nothing, Function} = nothing: optional binary accumulator   operation such that C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor}\n\nReturns\n\nGBArray: The output matrix whose eltype is determined by A and B or the semiring   if a type specific semiring is provided.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.emul","page":"Operations","title":"SuiteSparseGraphBLAS.emul","text":"emul(A::GBArrayOrTranspose, B::GBArrayOrTranspose, op = *; kwargs...)::GBMatrix\n\nApply the binary operator op elementwise on the set intersection of A and B. When op = * this is equivalent to A .* B, however any binary operator may be substituted.\n\nThe pattern of the result is the set intersection of A and B. For a set union equivalent see eadd.\n\nArguments\n\nA, B::GBArrayOrTranspose: A GBVector or GBMatrix, possibly transposed.\nop::Union{Function, Monoid} = *: the binary operation which is   applied such that C[i,j] = op(A[i,j], B[i,j]) for all i,j present in both A and B.\n\nKeywords\n\nmask::Union{Nothing, GBVecOrMat} = nothing: optional mask.\naccum::Union{Nothing} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc = nothing\n\nReturns\n\nGBVecOrMat: Output GBVector or GBMatrix whose eltype is determined by the eltype of   A and B or the binary operation if a type specific operation is provided.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.emul!","page":"Operations","title":"SuiteSparseGraphBLAS.emul!","text":"emul!(C::GBArrayOrTranspose, A::GBArrayOrTranspose, B::GBArrayOrTranspose, op = *; kwargs...)::GBArrayOrTranspose\n\nApply the binary operator op elementwise on the set intersection of A and B. Store or accumulate the result into C. When op = * this is equivalent to A .* B, however any binary operator may be substituted.\n\nThe pattern of the result is the set intersection of A and B. For a set union equivalent see eadd!.\n\nArguments\n\nC::GBArrayOrTranspose: the output vector or matrix.\nA, B::GBArrayOrTranspose: A GBVector or GBMatrix, possibly transposed.\nop::Union{Function, Monoid} = *: the binary operation which is   applied such that C[i,j] = op(A[i,j], B[i,j]) for all i,j present in both A and B.\n\nKeywords\n\nmask::Union{Nothing, GBVecOrMat} = nothing: optional mask.\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   such that C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before   accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.eadd","page":"Operations","title":"SuiteSparseGraphBLAS.eadd","text":"eadd(A::GBArrayOrTranspose, B::GBArrayOrTranspose, op = +; kwargs...)::GBVecOrMat\n\nApply the binary operator op elementwise on the set union of A and B. When op = + this is equivalent to A .+ B, however any binary operation may be substituted.\n\nNote that the behavior of A[i,j] op B[i,j] may be unintuitive when one operand is an implicit zero. The explicit operand passes through the function. So A[i,j] op B[i,j] where B[i,j] is an implicit zero returns A[i,j] not A[i,j] op zero(T).\n\nFor a set intersection equivalent see emul.\n\nArguments\n\nA, B::GBArrayOrTranspose: A GBVector or GBMatrix, possibly transposed.\nop::Union{Function, Monoid} = +: the binary operation which is   applied such that C[i,j] = op(A[i,j], B[i,j]) for all i,j present in either A and B.\n\nKeywords\n\nmask::Union{Nothing, GBVecOrMat} = nothing: optional mask.\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   such that C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.eadd!","page":"Operations","title":"SuiteSparseGraphBLAS.eadd!","text":"eadd!(C::GBVecOrMat, A::GBArrayOrTranspose, B::GBArrayOrTranspose, op = +; kwargs...)::GBVecOrMat\n\nApply the binary operator op elementwise on the set union of A and B. Store or accumulate the result into C. When op = + this is equivalent to A .+ B, however any binary operation may be substituted.\n\nNote that the behavior of A[i,j] op B[i,j] may be unintuitive when one operand is an implicit zero. The explicit operand passes through the function. So A[i,j] op B[i,j] where B[i,j] is an implicit zero returns A[i,j] not A[i,j] op zero(T).\n\nFor a set intersection equivalent see emul!.\n\nArguments\n\nC::GBArrayOrTranspose: the output vector or matrix.\nA, B::GBArrayOrTranspose: A GBVector or GBMatrix, possibly transposed.\nop::Union{Function, Monoid} = +: the binary operation which is   applied such that C[i,j] = op(A[i,j], B[i,j]) for all i,j present in either A and B.\n\nKeywords\n\nmask::Union{Nothing, GBVecOrMat} = nothing: optional mask.\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   such that C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.eunion","page":"Operations","title":"SuiteSparseGraphBLAS.eunion","text":"eunion(C::GBVecOrMat, A::GBArrayOrTranspose{T}, α::T B::GBArrayOrTranspose, β::T, op = +; kwargs...)::GBVecOrMat\n\nApply the binary operator op elementwise on the set union of A and B. When op = + this is equivalent to A .+ B, however any binary operation may be substituted.\n\nUnlike eadd! where an argument missing in A causes the B element to \"pass-through\", eunion! utilizes the α and β arguments for the missing operand elements.\n\nArguments\n\nA, B::GBArrayOrTranspose: A GBVector or GBMatrix, possibly transposed.\nα, β: The fill-in value for A and B respectively.\nop::Union{Function, Monoid} = +: the binary operation which is   applied such that C[i,j] = op(A[i,j], B[i,j]) for all i,j present in either A and B.\n\nKeywords\n\nmask::Union{Nothing, GBVecOrMat} = nothing: optional mask.\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   such that C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.eunion!","page":"Operations","title":"SuiteSparseGraphBLAS.eunion!","text":"eunion!(C::GBVecOrMat, A::GBArrayOrTranspose{T}, α::T B::GBArrayOrTranspose, β::T, op = +; kwargs...)::GBVecOrMat\n\nApply the binary operator op elementwise on the set union of A and B. Store or accumulate the result into C. When op = + this is equivalent to A .+ B, however any binary operation may be substituted.\n\nUnlike eadd! where an argument missing in A causes the B element to \"pass-through\", eunion! utilizes the α and β arguments for the missing operand elements.\n\nArguments\n\nC::GBArrayOrTranspose: the output vector or matrix.\nA, B::GBArrayOrTranspose: A GBVector or GBMatrix, possibly transposed.\nα, β: The fill-in value for A and B respectively.\nop::Union{Function, Monoid} = +: the binary operation which is   applied such that C[i,j] = op(A[i,j], B[i,j]) for all i,j present in either A and B.\n\nKeywords\n\nmask::Union{Nothing, GBVecOrMat} = nothing: optional mask.\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   such that C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.extract","page":"Operations","title":"SuiteSparseGraphBLAS.extract","text":"extract(A::GBMatrixOrTranspose, I, J; kwargs...)::GBMatrix\nextract(A::GBVector, I; kwargs...)::GBVector\n\nExtract a submatrix or subvector from A\n\nArguments\n\nA::GBArray: the array being indexed.\nI and J: A colon, scalar, vector, or range indexing A.\n\nKeywords\n\nmask::Union{Nothing, GBArray} = nothing: mask where   size(M) == (max(I), max(J)).\naccum::Union{Nothing} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Descriptor = nothing\n\nReturns\n\nGBMatrix: the submatrix A[I, J].\n\nThrows\n\nGrB_DIMENSION_MISMATCH: If (max(I), max(J)) != size(mask).\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.extract!","page":"Operations","title":"SuiteSparseGraphBLAS.extract!","text":"extract!(C::GBMatrix, A::GBMatrixOrTranspose, I, J; kwargs...)::GBMatrix\nextract!(C::GBVector, A::GBVector, I; kwargs...)::GBVector\n\nExtract a submatrix or subvector from A into C.\n\nArguments\n\nC::Union{GBVector, GBMatrix}: the submatrix or subvector extracted from A.\nA::GBArray\nI and J: A colon, scalar, vector, or range indexing A.\n\nKeywords\n\nmask::Union{Nothing, GBArray} = nothing: mask where   size(M) == (max(I), max(J)).\naccum::Union{Nothing} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\nReturns\n\nGBMatrix or GBVector: the modified array C, now containing the matrix A[I, J] or   A[I] for a vector.\n\nThrows\n\nGrB_DIMENSION_MISMATCH: If size(C) != (max(I), max(J)) or size(C) != size(mask).\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.subassign!","page":"Operations","title":"SuiteSparseGraphBLAS.subassign!","text":"subassign!(C::GBMatrix, A::GBMatrix, I, J; kwargs...)::GBMatrix\n\nAssign a submatrix of A to C. Equivalent to assign! except that size(mask) == size(A), whereas size(mask) == size(C) in assign!.\n\nArguments\n\nC::GBMatrix: the matrix being subassigned to where C[I,J] = A.\nA::GBMatrix: the matrix being assigned to a submatrix of C.\nI and J: A colon, scalar, vector, or range indexing C.\n\nKeywords\n\nmask::Union{Nothing, GBMatrix} = nothing: mask where   size(M) == size(A).\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\nReturns\n\nGBMatrix: The input matrix A.\n\nThrows\n\nGrB_DIMENSION_MISMATCH: If size(A) != (max(I), max(J)) or size(A) != size(mask).\n\n\n\n\n\nsubassign(w::GBVector, u::GBVector, I; kwargs...)::GBVector\n\nAssign a subvector of w to u. Return u. Equivalent to the matrix definition.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.assign!","page":"Operations","title":"SuiteSparseGraphBLAS.assign!","text":"assign!(C::GBMatrix, A::GBMatrix, I, J; kwargs...)::GBMatrix\n\nAssign a submatrix of A to C. Equivalent to subassign! except that size(mask) == size(C), whereas size(mask) == size(A) insubassign!`.\n\nArguments\n\nC::GBMatrix: the matrix being subassigned to where C[I,J] = A.\nA::GBMatrix: the matrix being assigned to a submatrix of C.\nI and J: A colon, scalar, vector, or range indexing C.\n\nKeywords\n\nmask::Union{Nothing, GBMatrix} = nothing: mask where   size(M) == size(C).\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\nReturns\n\nGBMatrix: The input matrix A.\n\nThrows\n\nGrB_DIMENSION_MISMATCH: If size(A) != (max(I), max(J)) or size(C) != size(mask).\n\n\n\n\n\nassign(w::GBVector, u::GBVector, I; kwargs...)::GBVector\n\nAssign a subvector of w to u. Return u. Equivalent to the matrix definition.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.apply","page":"Operations","title":"SuiteSparseGraphBLAS.apply","text":"apply[!](op::Function, [C::GBArray], A::GBArrayOrTranspose; kwargs...)::AbstractGBArray\napply[!](op::Function, [C::GBArray], A::GBArrayOrTranspose, x; kwargs...)::AbstractGBArray\napply[!](op::Function, [C::GBArray], x, A::GBArrayOrTranspose; kwargs...)::AbstractGBArray\napply[!](op::IndexOp{<:Function}, [C::GBArray], A::GBArrayOrTranspose{T}, thunk = defaultthunk(op, T); kwargs...)::AbstractGBArray\n\nTransform a GBArray by applying op to each element. Equivalent to Base.map except for the additional x argument for mapping with a scalar.\n\nUnary operators apply elementwise in the usual fashion. IndexOps, and operators that set isindexop(::F) = true operate elementwise with additional arguments for the indices     and an additional data argument thunk. Binary operators require the additional argument x which is      substituted as the first or second operand of op depending on its position in the apply signature.\n\nArguments\n\n`op::Union{Function, IndexOp}\nA::GBArrayOrTranspose\nx: Position dependent argument to binary operators.\nthunk: Extra data for IndexOps.\n\nKeywords\n\nmask::Union{Nothing, GBVecOrMat} = nothing: optional mask.\naccum::Union{Nothing, Function} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.apply!","page":"Operations","title":"SuiteSparseGraphBLAS.apply!","text":"No documentation found.\n\nBinding SuiteSparseGraphBLAS.apply does not exist.\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.select","page":"Operations","title":"SuiteSparseGraphBLAS.select","text":"select(op::Function, A::GBArrayOrTranspose; kwargs...)::GBArrayOrTranspose\nselect(op::Function, A::GBArrayOrTranspose, thunk; kwargs...)::GBArrayOrTranspose\n\nReturn a GBArray whose elements satisfy the predicate defined by op. Some SelectOps or functions may require an additional argument thunk, for use in     comparison operations such as C[i,j] = A[i,j] >= thunk ? A[i,j] : nothing, which is     performed by select(>, A, thunk).\n\nArguments\n\nop::Function: A select operator from the SelectOps submodule.\nA::GBArrayOrTranspose\nthunk::Union{GBScalar, nothing, valid_union}: Optional value used to evaluate op.\n\nKeywords\n\nmask::Union{Nothing, GBMatrix} = nothing: optional mask which determines the output   pattern.\naccum::Union{Nothing} = nothing: optional binary accumulator   operation where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc = nothing\n\nReturns\n\nGBArray: The output matrix whose eltype is determined by A and op.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.select!","page":"Operations","title":"SuiteSparseGraphBLAS.select!","text":"In place version of select.\n\n\n\n\n\n","category":"function"},{"location":"operations/#Base.reduce","page":"Operations","title":"Base.reduce","text":"reduce(op::Union{Function, AbstractMonoid}, A::GBMatrix, dims=:; kwargs...)\nreduce(op::Union{Function, AbstractMonoid}, v::GBVector; kwargs...)\n\nReduce A along dimensions of A with monoid op.\n\nArguments\n\nop: the reducer. This must map to an AbstractMonoid, not a binary op.\nA::GBArrayOrTranspose: GBVector or optionally transposed GBMatrix.\ndims = :: Optional dimensions for GBMatrix, may be 1, 2, or :.\n\nKeywords\n\ntypeout: Optional output type specification. Defaults to eltype(A).\ninit: Optional initial value.\nmask::Union{Nothing, GBMatrix} = nothing: optional mask.\naccum::Union{Nothing} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.gbtranspose","page":"Operations","title":"SuiteSparseGraphBLAS.gbtranspose","text":"gbtranspose(A::GBMatrix; kwargs...)::GBMatrix\n\nEagerly evaluated matrix transpose which returns the transposed matrix.\n\nKeywords\n\nmask::Union{Nothing, GBMatrix} = nothing: optional mask.\naccum::Union{Nothing} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = nothing\n\nReturns\n\nC::GBMatrix: output matrix.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.gbtranspose!","page":"Operations","title":"SuiteSparseGraphBLAS.gbtranspose!","text":"gbtranspose!(C::GBMatrix, A::GBMatrix; kwargs...)::Nothing\n\nEagerly evaluated matrix transpose, storing the output in C.\n\nArguments\n\nC::GBMatrix: output matrix.\nA::GBMatrix: input matrix.\n\nKeywords\n\nmask::Union{Nothing, GBMatrix} = nothing: optional mask.\naccum::Union{Nothing} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc::Union{Nothing, Descriptor} = DEFAULTDESC\n\n\n\n\n\n","category":"function"},{"location":"operations/#Base.kron","page":"Operations","title":"Base.kron","text":"kron(A::GBMatrix, B::GBMatrix, op = BinaryOps.TIMES; kwargs...)::GBMatrix\n\nKronecker product of two matrices using op as the multiplication operator. Does not support GBVectors at this time.\n\nArguments\n\nA::GBMatrix: optionally transposed.\nB::GBMatrix: optionally transposed.\nop::MonoidBinaryOrRig = BinaryOps.TIMES: the binary operation which replaces the arithmetic   multiplication operation from the usual kron function.\n\nKeywords\n\nmask::Union{Nothing, GBMatrix} = nothing: optional mask.\naccum::Union{Nothing} = nothing: binary accumulator operation   where C[i,j] = accum(C[i,j], T[i,j]) where T is the result of this function before accum is applied.\ndesc = nothing\n\n\n\n\n\n","category":"function"},{"location":"operations/#Base.kron!","page":"Operations","title":"Base.kron!","text":"kron!(A::GBMatrix, B::GBMatrix, op = BinaryOps.TIMES; kwargs...)::GBMatrix\n\nIn-place version of kron.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.mask","page":"Operations","title":"SuiteSparseGraphBLAS.mask","text":"mask(A::GBArrayOrTranspose, mask::GBVecOrMat)\n\nApply a mask to matrix A.\n\n\n\n\n\n","category":"function"},{"location":"operations/#SuiteSparseGraphBLAS.mask!","page":"Operations","title":"SuiteSparseGraphBLAS.mask!","text":"mask!(C::GBArrayOrTranspose, A::GBArrayOrTranspose, mask::GBVecOrMat)\n\nApply a mask to matrix A, storing the results in C.\n\n\n\n\n\n","category":"function"},{"location":"operations/#Order-of-Operations","page":"Operations","title":"Order of Operations","text":"","category":"section"},{"location":"operations/","page":"Operations","title":"Operations","text":"A GraphBLAS operation semantically occurs in the following order:","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"Calculate T = <operation>(args...)\nElementwise accumulate Z[i,j] = accum(C[i,j], T[i,j])\nOptionally masked assignment C[i,j] = mask[i,j] ? Z[i,j] : [nothing | C[i,j]]","category":"page"},{"location":"operations/","page":"Operations","title":"Operations","text":"If replace_output is set the option in step 3. is nothing, otherwise it is C[i,j].","category":"page"},{"location":"operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"operators/","page":"Operators","title":"Operators","text":"Operators are one of the basic objects of GraphBLAS. In Julia, however, users must only interact directly with operators on rare occasions, and should instead pass functions to GraphBLAS operations.","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"There are five operator types in SuiteSparseGraphBLAS: UnaryOp, IndexUnaryOp, BinaryOp, Monoid, and Semiring.","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"danger: Note\nOperators are not callable objects like functions. They do behave like functions when used as arguments to higher-order functions (Operations in the language of GraphBLAS).Operators are no longer first class objects in SuiteSparseGraphBLAS.jl v0.8. Only Monoids and possibly IndexOp require direct user interaction.","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"Typically operators are positional arguments in one of two places. For operations with a clear default operator they appear as the last positional argument:","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"emul(A, B, op::Function)\neadd(A, B, op::Function)\nkron(A, B, op::Function)\n*(A, B, op::Tuple{Function, Function})","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"For other operations without a clear default operator they appear as the first argument:","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"apply(op::Function, A)\nreduce(op::Union{Monoid, Function}, A)\nselect(op::Union{SelectOp, Function}, A)","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"note: Built-in vs User-defined operators\nGraphBLAS supports both built-in and user-defined operators. Built-in operators are precompiled C functions, while user-defined operators are function pointers to Julia functions. Built-in operators are typically much faster than user-defined ones. See the page for the particular operator type (unary, binary, select, etc.) for more information.","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"danger: User Defined Closure Functions\nDue to Julia limitations on the aarch64 and ppc64 architectures it is not possible to use closure functions, or callable objects as operators in SuiteSparseGraphBLAS.jl","category":"page"},{"location":"operators/#UnaryOps,-IndexUnaryOps,-BinaryOps,-Monoids,-and-Semirings","page":"Operators","title":"UnaryOps, IndexUnaryOps, BinaryOps, Monoids, and Semirings","text":"","category":"section"},{"location":"operators/","page":"Operators","title":"Operators","text":"Each operator is defined on a specific domain. For some this is the usual primitive datatypes like booleans, floats, and signed and unsigned integers of the typical sizes.","category":"page"},{"location":"operators/#Natively-Supported-Types","page":"Operators","title":"Natively Supported Types","text":"","category":"section"},{"location":"operators/","page":"Operators","title":"Operators","text":"SuiteSparseGraphBLAS.jl natively supports the following types:","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"Booleans\nIntegers with sizes 8, 16, 32, 64\nUnsigned Integers with sizes 8, 16, 32, 64\nFloat32 and Float64\nComplexF32 and ComplexF64","category":"page"},{"location":"operators/","page":"Operators","title":"Operators","text":"Users may freely use non-native isbitstypes as well, although they will incur a performance penalty.","category":"page"},{"location":"#SuiteSparseGraphBLAS.jl","page":"Introduction","title":"SuiteSparseGraphBLAS.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Fast sparse linear algebra is an essential part of the scientific computing toolkit. Outside of the usual applications, like differential equations, sparse linear algebra provides an elegant way to express graph algorithms on adjacency and incidence matrices. The GraphBLAS standard specifies a set of operations for computing sparse matrix graph algorithm in a vein similar to the BLAS or LAPACK standards.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"SuiteSparseGraphBLAS.jl is a blazing fast package for shared memory sparse matrix operations which wraps Tim Davis' SuiteSparse:GraphBLAS. If you use this package in your research please see Citing.","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Install using the Julia package manager in the REPL:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"] add SuiteSparseGraphBLAS","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"or with Pkg","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.add(\"SuiteSparseGraphBLAS\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The SuiteSparse:GraphBLAS binary, SSGraphBLAS_jll.jl, is installed automatically.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Then in the REPL or script using SuiteSparseGraphBLAS will make the package available for use.","category":"page"},{"location":"#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"GraphBLAS harnesses the well-understood duality between graphs and matrices. Specifically a graph can be represented by the adjacency matrix and/or incidence matrix, or one of the many variations on those formats.  With this matrix representation in hand we have a method to operate on the graph with linear algebra.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"One important algorithm that maps well to linear algebra is Breadth First Search (BFS).  A simple BFS is just a matrix-vector multiplication, where A is the adjacency matrix and v is the set of source nodes, as illustrated below.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: BFS and Adjacency Matrix)","category":"page"},{"location":"#GBArrays","page":"Introduction","title":"GBArrays","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The core SuiteSparseGraphBLAS.jl array types are GBVector and GBMatrix which are subtypes SparseArrays.AbstractSparseVector and SparseArrays.AbstractSparseMatrix respectively.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"note: GBArray\nThese docs will often refer to the GBArray type, which is the union of AbstractGBVector, AbstractGBMatrix and their lazy Transpose objects.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using SuiteSparseGraphBLAS\nusing SparseArrays","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"# create a size 13 empty sparse vector with Float64 elements.\nv = GBVector{Float64}(13) \n\n# create a 1000 x 1000 empty sparse matrix with ComplexF64 elements.\nA = GBMatrix{ComplexF64}(1000, 1000)\n\n# Non-stored values are equal to the fill value of A, \n# which is by default zero(eltype(A))\nA[1,5] == getfill(A)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Here we can already see several differences compared to SparseArrays.SparseMatrixCSC.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The first is that A is stored in hypersparse format, and by row.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"GBArrays are (technically) opaque to the user in order to allow the library author to choose the best storage format.\nSuiteSparse:GraphBLAS takes advantage of this by storing matrices in one of four formats: dense, bitmap, sparse-compressed, or hypersparse-compressed; and in either row or column major orientation.\nDifferent matrices may be better suited to storage in one of those formats, and certain operations may perform differently on row or column major matrices.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"warning: Default Orientation\nThe default orientation of a GBMatrix is by-row, the opposite of Julia arrays. However, a GBMatrix constructed from a SparseMatrixCSC or  Matrix will be stored by-column.\nThe orientation of a GBMatrix can be modified using setstorageorder!(A, RowMajor()) or setstorageorder!(A, ColMajor()), and queried by StorageOrders.storageorder(A)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Information about storage formats, orientation, conversion, construction and more can be found in Array-Types.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As noted in the example above, A has a fill-value, which defaults to zero(eltype(A)). For normal linear algebra this is a good choice for fill-value, however GraphBLAS is intended for graphs. To handle this SuiteSparseGraphBLAS.jl support missing for the fill value (this is an active area of development, and a new fill value that acts like the identity for most operations is better suited to this task).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A[1, 1] == zero(eltype(A))\n\nB = setfill(A, missing) # no-copy alias\nB[1, 1]","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"An empty matrix and vector won't do us much good, so let's see how to construct the matrix and vector from the graphic above. Both A and v below are constructed from coordinate format or COO.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A = GBMatrix([1,1,2,2,3,4,4,5,6,7,7,7], [2,4,5,7,6,1,3,6,3,3,4,5], [1:12...])\n\nv = GBVector([4], [10], 7)","category":"page"},{"location":"#GraphBLAS-Operations","page":"Introduction","title":"GraphBLAS Operations","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The complete documentation of supported operations can be found in Operations. GraphBLAS operations are, where possible, methods of existing Julia functions listed in the third column.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"GraphBLAS Operation Julia\nmxm, mxv, vxm bf C langle M rangle = C odot AB mul! or *\neWiseMult bf C langle M rangle = C odot (A otimes B) emul[!] or . broadcasting\neWiseAdd bf C langle M rangle = C odot (A oplus  B) eadd[!]\neWiseUnion bf C langle M rangle = C odot ( A vert alpha  oplus  B vert beta ) eunion[!]\nextract bf C langle M rangle = C odot A(IJ) extract[!], getindex\nsubassign bf C (IJ) langle M rangle = C(IJ) odot A subassign[!] or setindex!\nassign bf C langle M rangle (IJ) = C(IJ) odot A assign[!]\napply bf C langle M rangle = C odot fbf (A) apply[!], map[!] or . broadcasting\n bf C langle M rangle = C odot f(bf Ay) \n bf C langle M rangle = C odot f(xbf A) \n bf C langle M rangle = C odot f(bf A_ij i j x) \nselect bf C langle M rangle = C odot f(bf A_iji j x) select[!]\nreduce bf w langle m rangle = w odot oplus_j bf A(j) reduce[!]\n s = s odot oplus_ij  bf A(ij) \ntranspose bf C langle M rangle = C odot A^sf T gbtranspose[!], lazy: transpose, '\nkronecker bf C langle M rangle = C odot textkron(A B) kron[!]","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"where bf M is a GBArray mask, odot is a binary operator for accumulating into bf C, and otimes and oplus are a binary operation and commutative monoid respectively. f is either a unary or binary operator. ","category":"page"},{"location":"#GraphBLAS-Operators","page":"Introduction","title":"GraphBLAS Operators","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Many GraphBLAS operations take additional arguments called operators. In the table above operators are denoted by odot, otimes, and oplus and f, and they behave similar to the function argument of map. A closer look at operators can be found in Operators","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A GraphBLAS operator is a unary or binary function, the commutative monoid form of a binary function, or a semiring, made up of a binary op and a commutative monoid. SuiteSparse:GraphBLAS ships with many of the common unary and binary operators as built-ins, along with monoids and semirings built commonly used in graph algorithms.  These built-in operators are fast, and should be used where possible. However, users are also free to provide their own functions as operators when necessary.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"SuiteSparseGraphBLAS.jl will take care of operators behind the scenes, and in most cases users should pass in normal functions like + and sin. For example:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"emul(A, A, ^) # elementwise exponent\n\nmap(sin, A)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Broadcasting functionality is also supported, A .^ A will lower to emul(A, A, ^), and sin.(A) will lower to apply(sin, A).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Matrix multiplication, which accepts a semiring, can be called with either *(max, +)(A, B), *(A, B, (max, +)), or LinearAlgebra.mul!(C, A, B, (max, +)).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"We can also use functions that are not already built into SuiteSparseGraphBLAS.jl:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"M = GBMatrix([[1,2] [3,4]])\nincrement(x) = x + 1\nmap(increment, M)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Unfortunately this has a couple problems. The first is that it's slow.\nCompared to A .+ 1 which lowers to apply(+, A, 1) the map call above is ~2.5x slower due to function pointer overhead.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"warning: Performance of User Defined Functions\nOperators which are not already built-in are automatically constructed using function pointers when called.  Their performance is significantly degraded compared to built-in operators, and where possible user code should avoid this capability and instead compose built-in operators. See Operators.","category":"page"},{"location":"#Example","page":"Introduction","title":"Example","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Here is a quick example of two different methods of triangle counting with GraphBLAS. The methods are drawn from the LAGraph repo.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Input A must be a square, symmetric matrix with any element type. We'll test it using the matrix from the GBArray section above, which has two triangles in its undirected form.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"using SuiteSparseGraphBLAS: pair\nfunction cohen(A)\n  U = select(triu, A)\n  L = select(tril, A)\n  return reduce(+, *(L, U, (+, pair); mask=A)) ÷ 2\nend\n\nfunction sandia(A)\n  L = select(tril, A)\n  return reduce(+, *(L, L, (+, pair); mask=L))\nend\n\nM = eadd(A, A', +) #Make undirected/symmetric\ncohen(M)\nsandia(M)","category":"page"},{"location":"#Citing","page":"Introduction","title":"Citing","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Please cite the following papers if you use SuiteSparseGraphBLAS.jl in your work:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pdf:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"    @article{10.1145/3322125,\n    author = {Davis, Timothy A.},\n    title = {Algorithm 1000: SuiteSparse:GraphBLAS: Graph Algorithms in the Language of Sparse Linear Algebra},\n    year = {2019},\n    issue_date = {December 2019},\n    publisher = {Association for Computing Machinery},\n    address = {New York, NY, USA},\n    volume = {45},\n    number = {4},\n    issn = {0098-3500},\n    url = {https://doi.org/10.1145/3322125},\n    doi = {10.1145/3322125},\n    journal = {ACM Trans. Math. Softw.},\n    month = {dec},\n    articleno = {44},\n    numpages = {25},\n    keywords = {GraphBLAS, Graph algorithms, sparse matrices}\n    }","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pdf:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"    @article{GraphBLAS7,\n    author = {Davis, Timothy A.},\n    title = {Algorithm 10xx: SuiteSparse:GraphBLAS: Graph Algorithms in the Language of Sparse Linear Algebra},\n    year = {2022},\n    journal = {ACM Trans. Math. Softw.},\n    month = {(under revision)},\n    note={See GraphBLAS/Doc/toms_parallel_grb2.pdf},\n    keywords = {GraphBLAS, Graph algorithms, sparse matrices}\n}","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pdf:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"@inproceedings{9622789,\nauthor={Pelletier, Michel and Kimmerer, Will and Davis, Timothy A. and Mattson, Timothy G.},\nbooktitle={2021 IEEE High Performance Extreme Computing Conference (HPEC)},\ntitle={The GraphBLAS in Julia and Python: the PageRank and Triangle Centralities},\nyear={2021},\npages={1-7},\ndoi={10.1109/HPEC49654.2021.9622789},\nISSN={2643-1971},\nmonth={Sep.}\n}","category":"page"}]
}
